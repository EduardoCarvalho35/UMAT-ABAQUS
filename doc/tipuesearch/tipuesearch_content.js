var tipuesearch = {"pages":[{"title":" Fortran Program ","text":"Fortran Program SUBROUTINE GETOUTDIR(OUTDIR, LENOUTDIR) C>     GET CURRENT WORKING DIRECTORY\n      INCLUDE 'aba_param.inc'\nC \n      CHARACTER 256 OUTDIR\n      INTEGER LENOUTDIR\nC\n      CALL GETCWD(OUTDIR)\nc        OUTDIR=OUTDIR(1:SCAN(OUTDIR,'\\',BACK=.TRUE.)-1)\n      LENOUTDIR=LEN_TRIM(OUTDIR)\nC\n      RETURN\n      END SUBROUTINE GETOUTDIR\nC> * * * * * * * * * ****\nC> Record of revisions:                                              |\nC>        Date        Programmer        Description of change        |\nC>        ====        ==========        =====================        |\nC>     15/11/2017    Joao Ferreira      cont mech general eqs        |\nC>     01/11/2018    Joao Ferreira      comments added               |\nC>--------------------------------------------------------------------\nC>     Description:\nC>     UMAT: IMPLEMENTATION OF THE CONSTITUTIVE EQUATIONS BASED UPON \nC>     A STRAIN-ENERGY FUNCTION (SEF).\nC>     THIS CODE, AS IS, EXPECTS A SEF BASED ON THE INVARIANTS OF THE \nC>     CAUCHY-GREEN TENSORS. A VISCOELASTIC COMPONENT IS ALSO \nC>     INCLUDED IF NEEDED. \nC>     YOU CAN CHOOSE TO COMPUTE AT THE MATERIAL FRAME AND THEN \nC>     PUSHFORWARD OR  COPUTE AND THE SPATIAL FRAME DIRECTLY.\nC>--------------------------------------------------------------------\nC>     IF YOU WANT TO ADAPT THE CODE ACCORDING TO YOUR SEF:\nC>    ISOMAT - DERIVATIVES OF THE SEF IN ORDER TO THE INVARIANTS\nC>    ADD OTHER CONTRIBUTIONS: STRESS AND TANGENT MATRIX\nC>-------------------------------------------------------------------- \nC      STATE VARIABLES: CHECK ROUTINES - INITIALIZE, WRITESDV, READSDV.\nC>-------------------------------------------------------------------- C>     UEXTERNALDB: READ FILAMENTS ORIENTATION AND PREFERED DIRECTION\nC>--------------------------------------------------------------------\nC>---------------------------------------------------------------------\n      SUBROUTINE UMAT(STRESS,STATEV,DDSDDE,SSE,SPD,SCD,\n     1 RPL,DDSDDT,DRPLDE,DRPLDT,\n     2 STRAN,DSTRAN,TIME,DTIME,TEMP,DTEMP,PREDEF,DPRED,CMNAME,\n     3 NDI,NSHR,NTENS,NSTATEV,PROPS,NPROPS,COORDS,DROT,PNEWDT,\n     4 CELENT,DFGRD0,DFGRD1,NOEL,NPT,LAYER,KSPT,KSTEP,KINC)\nC\nC----------------------------------------------------------------------\nC--------------------------- DECLARATIONS -----------------------------\nC----------------------------------------------------------------------\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC     ADD COMMON BLOCKS HERE IF NEEDED (and in uexternal)\nC      COMMON /KBLOCK/KBLOCK COMMON /KFIB/FIBORI C\n      CHARACTER 8 CMNAME\nC\n      INTEGER NDI, NSHR, NTENS, NSTATEV, NPROPS, NOEL, NPT,\n     1        LAYER, KSPT, KSTEP, KINC\nC DOUBLE PRECISION STRESS(NTENS),STATEV(NSTATEV),\n     1 DDSDDE(NTENS,NTENS),DDSDDT(NTENS),DRPLDE(NTENS),\n     2 STRAN(NTENS),DSTRAN(NTENS),TIME(2),PREDEF(1),DPRED(1),\n     3 PROPS(NPROPS),COORDS(3),DROT(3,3),DFGRD0(3,3),DFGRD1(3,3),\n     4 FIBORI(NELEM,4)\nC\n      DOUBLE PRECISION SSE, SPD, SCD, RPL, DRPLDT, DTIME, TEMP,\n     1                 DTEMP,PNEWDT,CELENT\nC\n      INTEGER NTERM\nC\nC     FLAGS\nC      INTEGER FLAG1\nC     UTILITY TENSORS\n      DOUBLE PRECISION UNIT2(NDI,NDI),UNIT4(NDI,NDI,NDI,NDI),\n     1                 UNIT4S(NDI,NDI,NDI,NDI),\n     2                 PROJE(NDI,NDI,NDI,NDI),PROJL(NDI,NDI,NDI,NDI)\nC     KINEMATICS\n      DOUBLE PRECISION DISTGR(NDI,NDI),C(NDI,NDI),B(NDI,NDI),\n     1                 CBAR(NDI,NDI),BBAR(NDI,NDI),DISTGRINV(NDI,NDI),\n     2                 UBAR(NDI,NDI),VBAR(NDI,NDI),ROT(NDI,NDI),\n     3                 DFGRD1INV(NDI,NDI)\n      DOUBLE PRECISION DET,CBARI1,CBARI2\nC     VOLUMETRIC CONTRIBUTION\n      DOUBLE PRECISION PKVOL(NDI,NDI),SVOL(NDI,NDI),\n     1                 CVOL(NDI,NDI,NDI,NDI),CMVOL(NDI,NDI,NDI,NDI)\n      DOUBLE PRECISION KBULK,PV,PPV,SSEV\nC     ISOCHORIC CONTRIBUTION\n      DOUBLE PRECISION SISO(NDI,NDI),PKISO(NDI,NDI),PK2(NDI,NDI),\n     1                 CISO(NDI,NDI,NDI,NDI),CMISO(NDI,NDI,NDI,NDI),\n     2                 SFIC(NDI,NDI),CFIC(NDI,NDI,NDI,NDI),\n     3                 PKFIC(NDI,NDI),CMFIC(NDI,NDI,NDI,NDI)\nC     ISOCHORIC ISOTROPIC CONTRIBUTION\n      DOUBLE PRECISION C10,C01,SSEISO,DISO(5),PKMATFIC(NDI,NDI),\n     1                 SMATFIC(NDI,NDI),SISOMATFIC(NDI,NDI),\n     2                 CMISOMATFIC(NDI,NDI,NDI,NDI),\n     3                 CISOMATFIC(NDI,NDI,NDI,NDI) C     ISOCHORIC ANISOTROPIC CONTRIBUTION\n      DOUBLE PRECISION K1,K2,KDISP,SSEANISO,\n     1                 DANISO(4),\n     2                 PKMATFICANISO(NDI,NDI),\n     3                 SANISOMATFIC(NDI,NDI),\n     4                 CMANISOMATFIC(NDI,NDI,NDI,NDI),\n     6                 CANISOMATFIC(NDI,NDI,NDI,NDI),\n     8                 LAMBDA,BARLAMBDA,\n     9                 CBARI4\n      DOUBLE PRECISION VORIF(3),VD(3),M0(3,3),MM(3,3),\n     1        VORIF2(3),VD2(3),N0(3,3),NN(3,3)\nC     LIST VARS OF OTHER CONTRIBUTIONS HERE\nC\nC     VISCOUS PROPERTIES (GENERALIZED MAXWEL DASHPOTS)\n      DOUBLE PRECISION VSCPROPS(6)\n      INTEGER VV\nC     JAUMMAN RATE CONTRIBUTION (REQUIRED FOR ABAQUS UMAT)\n      DOUBLE PRECISION CJR(NDI,NDI,NDI,NDI)\nC     CAUCHY STRESS AND ELASTICITY TENSOR\n      DOUBLE PRECISION SIGMA(NDI,NDI),DDSIGDDE(NDI,NDI,NDI,NDI),\n     1                                 DDPKDDE(NDI,NDI,NDI,NDI)\nC     TESTING/DEBUG VARS\n      DOUBLE PRECISION STEST(NDI,NDI), CTEST(NDI,NDI,NDI,NDI)\nC----------------------------------------------------------------------\nC-------------------------- INITIALIZATIONS ---------------------------\nC----------------------------------------------------------------------\nC     IDENTITY AND PROJECTION TENSORS\n      UNIT2=ZERO\n      UNIT4=ZERO\n      UNIT4S=ZERO\n      PROJE=ZERO\n      PROJL=ZERO\nC     KINEMATICS\n      DISTGR=ZERO\n      C=ZERO\n      B=ZERO\n      CBAR=ZERO\n      BBAR=ZERO\n      UBAR=ZERO\n      VBAR=ZERO\n      ROT=ZERO\n      DET=ZERO\n      CBARI1=ZERO\n      CBARI2=ZERO\nC     VOLUMETRIC\n      PKVOL=ZERO\n      SVOL=ZERO\n      CVOL=ZERO\n      KBULK=ZERO\n      PV=ZERO\n      PPV=ZERO\n      SSEV=ZERO\nC     ISOCHORIC\n      SISO=ZERO\n      PKISO=ZERO\n      PK2=ZERO\n      CISO=ZERO\n      CFIC=ZERO\n      SFIC=ZERO\n      PKFIC=ZERO\nC     ISOTROPIC\n      C10=ZERO\n      C01=ZERO\n      SSEISO=ZERO\n      DISO=ZERO\n      PKMATFIC=ZERO\n      SMATFIC=ZERO\n      SISOMATFIC=ZERO\n      CMISOMATFIC=ZERO\n      CISOMATFIC=ZERO\nC     INITIALIZE OTHER CONT HERE\nC\nC     JAUMANN RATE\n      CJR=ZERO\nC     TOTAL CAUCHY STRESS AND ELASTICITY TENSORS\n      SIGMA=ZERO\n      DDSIGDDE=ZERO\nC\nC----------------------------------------------------------------------\nC------------------------ IDENTITY TENSORS ----------------------------\nC----------------------------------------------------------------------\n            CALL ONEM(UNIT2,UNIT4,UNIT4S,NDI)\nC----------------------------------------------------------------------\nC------------------- MATERIAL CONSTANTS AND DATA ----------------------\nC----------------------------------------------------------------------\nC     VOLUMETRIC\n      KBULK    = PROPS(1)\nC     ISOCHORIC ISOTROPIC NEO HOOKE\n      C10      = PROPS(2)\n      C01      = PROPS(3) C     ISOCHORIC ANISOTROPIC GHO\n      K1      = PROPS(4)\n      K2      = PROPS(5)\n      KDISP   = PROPS(6)\nC     VISCOUS EFFECTS: MAXWELL ELEMTS (MAX:3)\n      VV       = INT(PROPS(7))\n      VSCPROPS = PROPS(8:13)\nC     NUMERICAL COMPUTATIONS\n      NTERM    = 60\nC\nC     STATE VARIABLES\nC\n      IF ((TIME(1).EQ.ZERO).AND.(KSTEP.EQ.1)) THEN\n      CALL INITIALIZE(STATEV,VV)\n      ENDIF\nC        READ STATEV\n      CALL SDVREAD(STATEV,VV)\nC C----------------------------------------------------------------------\nC---------------------------- KINEMATICS ------------------------------\nC----------------------------------------------------------------------\nC     DISTORTION GRADIENT\n      CALL FSLIP(DFGRD1,DISTGR,DET,NDI)\nC     INVERSE OF DISTORTION GRADIENT\n      CALL MATINV3D(DFGRD1,DFGRD1INV,NDI)\nC     INVERSE OF DISTORTION GRADIENT\n      CALL MATINV3D(DISTGR,DISTGRINV,NDI)\nC     CAUCHY-GREEN DEFORMATION TENSORS\n      CALL DEFORMATION(DFGRD1,C,B,NDI)\n      CALL DEFORMATION(DISTGR,CBAR,BBAR,NDI) C     FIBER UNIT VECTOR AND STRUCTURAL TENSOR\n      CALL FIBDIR(FIBORI,M0,MM,NELEM,NOEL,NDI,VORIF,VD,DISTGR,DFGRD1)\nC     INVARIANTS OF DEVIATORIC DEFORMATION TENSORS\n      CALL INVARIANTS(CBAR,CBARI1,CBARI2,NDI)\nC CALL PINVARIANTS(CBAR,CBARI4,NDI,M0,LAMBDA,BARLAMBDA,DET)\nC C     STRETCH TENSORS\n      CALL STRETCH(CBAR,BBAR,UBAR,VBAR,NDI)\nC     ROTATION TENSORS\n      CALL ROTATION(DISTGR,ROT,UBAR,NDI)\nC     DEVIATORIC PROJECTION TENSORS\n      CALL PROJEUL(UNIT2,UNIT4S,PROJE,NDI)\nC\n      CALL PROJLAG(C,UNIT4,PROJL,NDI)\nC----------------------------------------------------------------------\nC--------------------- CONSTITUTIVE RELATIONS  ------------------------\nC----------------------------------------------------------------------\nC\nC---- VOLUMETRIC ------------------------------------------------------\nC     STRAIN-ENERGY AND DERIVATIVES (CHANGE HERE ACCORDING TO YOUR MODEL)\n      CALL VOL(SSEV,PV,PPV,KBULK,DET)\n      CALL ISOMAT(SSEISO,DISO,C10,C01,CBARI1,CBARI2)\n      CALL ANISOMAT(SSEANISO,DANISO,DISO,K1,K2,KDISP,CBARI4,CBARI1)\nC\nC---- ISOCHORIC ISOTROPIC ---------------------------------------------\nC     PK2 'FICTICIOUS' STRESS TENSOR\n      CALL PK2ISOMATFIC(PKMATFIC,DISO,CBAR,CBARI1,UNIT2,NDI)\nC     CAUCHY 'FICTICIOUS' STRESS TENSOR\n      CALL SIGISOMATFIC(SISOMATFIC,PKMATFIC,DISTGR,DET,NDI)\nC     'FICTICIOUS' MATERIAL ELASTICITY TENSOR\n      CALL CMATISOMATFIC(CMISOMATFIC,CBAR,CBARI1,CBARI2,\n     1                          DISO,UNIT2,UNIT4,DET,NDI)\nC     'FICTICIOUS' SPATIAL ELASTICITY TENSOR\n      CALL CSISOMATFIC(CISOMATFIC,CMISOMATFIC,DISTGR,DET,NDI)\nC\nC---- OTHER CONTRIBUTIONS HERE  ----------------------------------------\nC\n      CALL PK2ANISOMATFIC(PKMATFICANISO,DANISO,CBAR,CBARI4,M0,NDI)\n      CALL PUSH2(SANISOMATFIC,PKMATFICANISO,DISTGR,DET,NDI)\nC CALL CMATANISOMATFIC(CMANISOMATFIC,M0,DANISO,UNIT2,DET,NDI)\n      CALL PUSH4(CANISOMATFIC,CMANISOMATFIC,DISTGR,DET,NDI)\nC----------------------------------------------------------------------\nC     SUM OF ALL ELASTIC CONTRIBUTIONS\nC----------------------------------------------------------------------\nC     STRAIN-ENERGY\n      SSE=SSEV+SSEISO+SSEANISO\nC     PK2 'FICTICIOUS' STRESS\n      PKFIC=PKMATFIC+PKMATFICANISO\nC     CAUCHY 'FICTICIOUS' STRESS\n      SFIC=SISOMATFIC+SANISOMATFIC\nC     MATERIAL 'FICTICIOUS' ELASTICITY TENSOR\n      CMFIC=CMISOMATFIC+CMANISOMATFIC\nC     SPATIAL 'FICTICIOUS' ELASTICITY TENSOR\n      CFIC=CISOMATFIC+CANISOMATFIC\nC\nC----------------------------------------------------------------------\nC-------------------------- STRESS MEASURES ---------------------------\nC----------------------------------------------------------------------\nC\nC---- VOLUMETRIC ------------------------------------------------------\nC      PK2 STRESS\n      CALL PK2VOL(PKVOL,PV,C,NDI)\nC      CAUCHY STRESS\n      CALL SIGVOL(SVOL,PV,UNIT2,NDI)\nC\nC---- ISOCHORIC -------------------------------------------------------\nC      PK2 STRESS\n      CALL PK2ISO(PKISO,PKFIC,PROJL,DET,NDI)\nC      CAUCHY STRESS\n      CALL SIGISO(SISO,SFIC,PROJE,NDI)\nC      ACTIVE CAUCHY STRESS\nC      CALL SIGISO(SACTISO,SNETFICAF,PROJE,NDI)\nC\nC      CALL SPECTRAL(SACTISO,SACTVL,SACTVC)\nC\nC---- VOLUMETRIC + ISOCHORIC ------------------------------------------\nC      PK2 STRESS\n      PK2   = PKVOL + PKISO\nC      CAUCHY STRESS\n      SIGMA = SVOL  + SISO\nC\nC----------------------------------------------------------------------\nC-------------------- MATERIAL ELASTICITY TENSOR ----------------------\nC----------------------------------------------------------------------\nC\nC---- VOLUMETRIC ------------------------------------------------------\nC\n      CALL METVOL(CMVOL,C,PV,PPV,DET,NDI)\nC\nC---- ISOCHORIC -------------------------------------------------------\nC\n      CALL METISO(CMISO,CMFIC,PROJL,PKISO,PKFIC,C,UNIT2,DET,NDI)\nC\nC----------------------------------------------------------------------\nC\n      DDPKDDE=  CMVOL + CMISO\nC\nC----------------------------------------------------------------------\nC--------------------- SPATIAL ELASTICITY TENSOR ----------------------\nC----------------------------------------------------------------------\nC\nC---- VOLUMETRIC ------------------------------------------------------\nC\n      CALL SETVOL(CVOL,PV,PPV,UNIT2,UNIT4S,NDI)\nC\nC---- ISOCHORIC -------------------------------------------------------\nC\n      CALL SETISO(CISO,CFIC,PROJE,SISO,SFIC,UNIT2,NDI)\nC\nC-----JAUMMAN RATE ----------------------------------------------------\nC\n      CALL SETJR(CJR,SIGMA,UNIT2,NDI)\nC\nC----------------------------------------------------------------------\nC\nC     ELASTICITY TENSOR\n      DDSIGDDE=CVOL+CISO+CJR\nC\nC----------------------------------------------------------------------\nC-------------------------- VISCOUS PART ------------------------------\nC----------------------------------------------------------------------\nC      PULLBACK OF STRESS AND ELASTICITY TENSORS\nC      CALL PULL2(PKVOL,SVOL,DFGRD1INV,DET,NDI)\nC      CALL PULL2(PKISO,SISO,DFGRD1INV,DET,NDI)\nC      CALL PULL4(CMVOL,CVOL,DFGRD1INV,DET,NDI)\nC      CALL PULL4(CMISO,CISO,DFGRD1INV,DET,NDI)\nC      VISCOUS DAMPING\n      CALL VISCO(PK2,DDPKDDE,VV,PKVOL,PKISO,CMVOL,CMISO,DTIME,\n     1                                        VSCPROPS,STATEV,NDI)\nC\nC      PUSH FORWARD OF STRESS AND ELASTICITY TENSOR\n      CALL PUSH2(SIGMA,PK2,DFGRD1,DET,NDI)\nC\n      CALL PUSH4(DDSIGDDE,DDPKDDE,DFGRD1,DET,NDI)\n      DDSIGDDE=DDSIGDDE+CJR\nC C\nC----------------------------------------------------------------------\nC------------------------- INDEX ALLOCATION ---------------------------\nC----------------------------------------------------------------------\nC     VOIGT NOTATION  - FULLY SIMMETRY IMPOSED\n      CALL INDEXX(STRESS,DDSDDE,SIGMA,DDSIGDDE,NTENS,NDI)\nC\nC----------------------------------------------------------------------\nC--------------------------- STATE VARIABLES --------------------------\nC----------------------------------------------------------------------\nC     DO K1 = 1, NTENS\nC      STATEV(1:27) = VISCOUS TENSORS\n       CALL SDVWRITE(DET,STATEV,VV)\nC     END DO\nC----------------------------------------------------------------------\n      RETURN\n      END\nC----------------------------------------------------------------------\nC--------------------------- END OF UMAT ------------------------------\nC----------------------------------------------------------------------\nC\n      SUBROUTINE ANISOMAT(SSEANISO,DANISO,DISO,K1,K2,KDISP,I4,I1)\nC>     ANISOTROPIC PART : ISOCHORIC SEF AND DERIVATIVES\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      DOUBLE PRECISION SSEISO,DANISO(4),DISO(5)\n      DOUBLE PRECISION K1,K2,KDISP,I4,I1\n      DOUBLE PRECISION DUDI1,D2UD2I1,SSEANISO\n      DOUBLE PRECISION E1,EE2,EE3,DUDI4,D2UD2I4,D2DUDI1DI4,D2DUDI2DI4\nC\n      DUDI1=DISO(1)\n      D2UD2I1=DISO(3)\nC E1=I4 (ONE-THREE KDISP)+I1 KDISP-ONE\nC\n      SSEANISO=(K1/K2) (DEXP(K1 E1*E1)-ONE) IF(E1.GT.ZERO) THEN C\n      EE2=DEXP(K2 E1 E1)\n      EE3=(ONE+TWO K2 E1 E1)\nC\n      DUDI1=DUDI1+K1 KDISP E1 EE2\n      D2UD2I1=D2UD2I1+K1 KDISP KDISP EE3 EE2\nC DUDI4=K1 (ONE-THREE KDISP) E1 EE2\nC\n      D2UD2I4=K1 ((ONE-THREE KDISP) TWO) EE3 EE2 D2DUDI1DI4=K1*(ONE-THREE*KDISP)*KDISP*EE3*EE2 D2DUDI2DI4=ZERO C\n      ELSE\n      DUDI4=ZERO\n      D2UD2I4=ZERO\n      D2DUDI1DI4=ZERO\n      D2DUDI2DI4=ZERO D2UD2I1=ZERO C\n      END IF\n      !FIRST DERIVATIVE OF SSEANISO IN ORDER TO I1\n      DANISO(1)=DUDI4\n      !FIRST DERIVATIVE OF SSEANISO IN ORDER TO I2\n      DANISO(2)=D2UD2I4\n      !2ND DERIVATIVE OF SSEANISO IN ORDER TO I1\n      DANISO(3)=D2DUDI1DI4\n      !2ND DERIVATIVE OF SSEANISO IN ORDER TO I2\n      DANISO(4)=D2DUDI2DI4\nC\n      DISO(1)=DUDI1\n      DISO(3)=D2UD2I1\nC\n      RETURN\n      END SUBROUTINE ANISOMAT\n      SUBROUTINE CSISOMATFIC(CISOMATFIC,CMISOMATFIC,DISTGR,DET,NDI)\nC>    ISOTROPIC MATRIX: SPATIAL 'FICTICIOUS' ELASTICITY TENSOR\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI\n      DOUBLE PRECISION CMISOMATFIC(NDI,NDI),DISTGR(NDI,NDI),\n     1                 CISOMATFIC(NDI,NDI,NDI,NDI)\n      DOUBLE PRECISION DET C\n      CALL PUSH4(CISOMATFIC,CMISOMATFIC,DISTGR,DET,NDI)\nC\n      RETURN\n      END SUBROUTINE CSISOMATFIC\n      SUBROUTINE CMATANISOMATFIC(CMANISOMATFIC,M0,DANISO,UNIT2,DET,NDI)\nC\nC>    ANISOTROPIC MATRIX: MATERIAL 'FICTICIOUS' ELASTICITY TENSOR\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI,I,J,K,L\n      DOUBLE PRECISION CMANISOMATFIC(NDI,NDI,NDI,NDI),UNIT2(NDI,NDI),\n     1                 M0(NDI,NDI),DANISO(3),DET\n      DOUBLE PRECISION CINV4(NDI,NDI,NDI,NDI),CINV14(NDI,NDI,NDI,NDI)\n      DOUBLE PRECISION D2UDI4,D2UDI1DI4\n      DOUBLE PRECISION IMM(NDI,NDI,NDI,NDI),MMI(NDI,NDI,NDI,NDI),\n     1                 MM0(NDI,NDI,NDI,NDI)\nC\nC-----------------------------------------------------------------------------\n      !2ND DERIVATIVE OF SSEANISO IN ORDER TO I4\n      D2UDI4=DANISO(2)\n      !2ND DERIVATIVE OF SSEANISO IN ORDER TO I1 AND I4\n      D2UDI1DI4=DANISO(3)\nC\n      CALL TENSORPROD2(M0,M0,MM0,NDI)\n      CALL TENSORPROD2(UNIT2,M0,IMM,NDI)\n      CALL TENSORPROD2(M0,UNIT2,MMI,NDI)\nC\n      DO I=1,NDI\n       DO J=1,NDI\n         DO K=1,NDI\n          DO L=1,NDI\n          CINV4(I,J,K,L)=D2UDI4 MM0(I,J,K,L)\n          CINV14(I,J,K,L)=D2UDI1DI4 (IMM(I,J,K,L)+MMI(I,J,K,L))\n          CMANISOMATFIC(I,J,K,L)=FOUR (CINV4(I,J,K,L)+CINV14(I,J,K,L))\n          END DO\n         END DO\n       END DO\n      END DO\nC\n      RETURN\n      END SUBROUTINE CMATANISOMATFIC\n      SUBROUTINE CMATISOMATFIC(CMISOMATFIC,CBAR,CBARI1,CBARI2,\n     1                          DISO,UNIT2,UNIT4,DET,NDI)\nC>    ISOTROPIC MATRIX: MATERIAL 'FICTICIOUS' ELASTICITY TENSOR\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI,I1,J1,K1,L1\n      DOUBLE PRECISION CMISOMATFIC(NDI,NDI,NDI,NDI),UNIT2(NDI,NDI),\n     1                 CBAR(NDI,NDI),DISO(5),\n     2                 UNIT4(NDI,NDI,NDI,NDI)\n      DOUBLE PRECISION CBARI1,CBARI2\n      DOUBLE PRECISION DUDI1,DUDI2,D2UD2I1,D2UD2I2,D2UDI1I2\n      DOUBLE PRECISION AUX,AUX1,AUX2,AUX3,AUX4,DET\n      DOUBLE PRECISION UIJ,UKL,CIJ,CKL C\n      DUDI1=DISO(1)\n      DUDI2=DISO(2)\n      D2UD2I1=DISO(3)\n      D2UD2I2=DISO(4)\n      D2UDI1I2=DISO(5)\nC\n      AUX1=FOUR (D2UD2I1+TWO CBARI1 D2UDI1I2+\n     1           DUDI2+CBARI1 CBARI1 D2UD2I2)\n      AUX2=-FOUR (D2UDI1I2+CBARI1 D2UD2I2)\n      AUX3=FOUR D2UD2I2\n      AUX4=-FOUR DUDI2 DO I1=1,NDI DO J1=1,NDI DO K1=1,NDI DO L1=1,NDI UIJ=UNIT2(I1,J1) UKL=UNIT2(K1,L1) CIJ=CBAR(I1,J1) CKL=CBAR(K1,L1) AUX=AUX1*UIJ*UKL+ 1                   AUX2*(UIJ*CKL+CIJ*UKL)+AUX3*CIJ*CKL+ 3                   AUX4*UNIT4(I1,J1,K1,L1) CMISOMATFIC(I1,J1,K1,L1)=AUX END DO END DO END DO END DO C\n      RETURN\n      END SUBROUTINE CMATISOMATFIC\n      SUBROUTINE CONTRACTION24(S,LT,RT,NDI)\nC>       DOUBLE CONTRACTION BETWEEN 4TH ORDER AND 2ND ORDER  TENSOR\nC>      INPUT:\nC>       LT - RIGHT 2ND ORDER TENSOR\nC>       RT - LEFT  4TH ODER TENSOR\nC>      OUTPUT:\nC>       S - DOUBLE CONTRACTED TENSOR (2ND ORDER)\n       IMPLICIT NONE\n       INCLUDE 'PARAM_UMAT.INC'\nC\n       INTEGER I1,J1,K1,L1,NDI\nC\n       DOUBLE PRECISION LT(NDI,NDI),RT(NDI,NDI,NDI,NDI)\n       DOUBLE PRECISION S(NDI,NDI)\n       DOUBLE PRECISION AUX\nC\n      DO K1=1,NDI\n       DO L1=1,NDI\n         AUX=ZERO\n        DO I1=1,NDI\n         DO J1=1,NDI\n           AUX=AUX+LT(K1,L1) RT(I1,J1,K1,L1)\n        END DO\n       END DO\n          S(K1,L1)=AUX\n      END DO\n      END DO\n       RETURN\n      END SUBROUTINE CONTRACTION24\n      SUBROUTINE CONTRACTION42(S,LT,RT,NDI)\nC>       DOUBLE CONTRACTION BETWEEN 4TH ORDER AND 2ND ORDER  TENSOR\nC>      INPUT:\nC>       LT - RIGHT 4TH ORDER TENSOR\nC>       RT - LEFT  2ND ODER TENSOR\nC>      OUTPUT:\nC>       S - DOUBLE CONTRACTED TENSOR (2ND ORDER)\n       IMPLICIT NONE\n       INCLUDE 'PARAM_UMAT.INC'\nC\n       INTEGER I1,J1,K1,L1,NDI\nC\n       DOUBLE PRECISION RT(NDI,NDI),LT(NDI,NDI,NDI,NDI)\n       DOUBLE PRECISION S(NDI,NDI)\n       DOUBLE PRECISION AUX\nC\n       DO I1=1,NDI\n        DO J1=1,NDI\n          AUX=ZERO\n         DO K1=1,NDI\n          DO L1=1,NDI\n            AUX=AUX+LT(I1,J1,K1,L1) RT(K1,L1)\n         END DO\n        END DO\n           S(I1,J1)=AUX\n       END DO\n      END DO\n       RETURN\n      END SUBROUTINE CONTRACTION42\n      SUBROUTINE CONTRACTION44(S,LT,RT,NDI)\nC>       DOUBLE CONTRACTION BETWEEN 4TH ORDER TENSORS\nC>      INPUT:\nC>       LT - RIGHT 4TH ORDER TENSOR\nC>       RT - LEFT  4TH ORDER TENSOR\nC>      OUTPUT:\nC>       S - DOUBLE CONTRACTED TENSOR (4TH ORDER)\n       IMPLICIT NONE\n       INCLUDE 'PARAM_UMAT.INC'\nC\n       INTEGER I1,J1,K1,L1,M1,N1,NDI\nC\n       DOUBLE PRECISION LT(NDI,NDI,NDI,NDI),RT(NDI,NDI,NDI,NDI)\n       DOUBLE PRECISION S(NDI,NDI,NDI,NDI)\n       DOUBLE PRECISION AUX\nC DO I1=1,NDI\n        DO J1=1,NDI\n         DO K1=1,NDI\n          DO L1=1,NDI\n           AUX=ZERO\n           DO M1=1,NDI\n            DO N1=1,NDI\n                AUX=AUX+LT(I1,J1,M1,N1) RT(M1,N1,K1,L1)\n            END DO\n           END DO\n           S(I1,J1,K1,L1)=AUX\n          END DO\n         END DO\n        END DO\n       END DO\nC\n       RETURN\n      END SUBROUTINE CONTRACTION44\n      SUBROUTINE CSFILFIC(CFIC,RHO,LAMBDA,DW,DDW,M,RW,NDI)\nC>    AFFINE NETWORK: 'FICTICIOUS' ELASTICITY TENSOR\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI,I1,J1,K1,L1\n      DOUBLE PRECISION CFIC(NDI,NDI,NDI,NDI),M(NDI)\n      DOUBLE PRECISION RHO,AUX,DW,DDW,RW,LAMBDA,AUX0\nC\n      AUX0=DDW-(LAMBDA (-ONE)) DW\n      AUX=RHO AUX0 RW (LAMBDA (-TWO))\n      DO I1=1,NDI\n       DO J1=1,NDI\n        DO K1=1,NDI\n         DO L1=1,NDI\n          CFIC(I1,J1,K1,L1)=AUX M(I1) M(J1) M(K1) M(L1)\n         END DO\n        END DO\n       END DO\n      END DO\nC\n      RETURN\n      END SUBROUTINE CSFILFIC\n      SUBROUTINE DEFFIL(LAMBDA,M,M0,F,NDI)\nC>      SINGLE FILAMENT: STRETCH AND DEFORMED DIRECTION\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI,I1,J1\n      DOUBLE PRECISION F(NDI,NDI),M(NDI),M0(NDI)\n      DOUBLE PRECISION AUX,LAMBDA C\n      LAMBDA=ZERO\n      DO I1=1,NDI\n        AUX=ZERO\n       DO J1=1,NDI\n         AUX=AUX+F(I1,J1) M0(J1)\n       END DO\n         M(I1)=AUX\n      END DO\n         LAMBDA=DOT_PRODUCT(M,M)\n         LAMBDA=SQRT(LAMBDA)\nC\n      RETURN\n      END SUBROUTINE DEFFIL\n      SUBROUTINE DEFORMATION(F,C,B,NDI)\nC>     RIGHT AND LEFT CAUCHY-GREEN DEFORMATION TENSORS\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI\n      DOUBLE PRECISION F(NDI,NDI),C(NDI,NDI),B(NDI,NDI) \nC     RIGHT CAUCHY-GREEN DEFORMATION TENSOR\n      C=MATMUL(TRANSPOSE(F),F)\nC     LEFT CAUCHY-GREEN DEFORMATION TENSOR\n      B=MATMUL(F,TRANSPOSE(F))\n      RETURN\n      END SUBROUTINE DEFORMATION\n      SUBROUTINE FIBDIR(FIB,ST0,ST,NE,NOEL,NDI,VORIF,VD,DISTGR,DFGRD1)\nC\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI, NE, NOEL,INOEL,I,J,I1,J1\n      DOUBLE PRECISION SUM1, DFGRD1(3,3), DNORM\n      DOUBLE PRECISION VORIF(3),ST(3,3),VD(3),ST0(3,3),DISTGR(3,3)\n      DOUBLE PRECISION FIB(NE,4)\nC\n        INOEL=0\n        I=0\n        DO I=1,NE\nC               ELEMENT IDENTIFICATION\n            IF(NOEL.EQ.INT(FIB(I,1))) THEN\n                INOEL=I\n            ENDIF\n        ENDDO\nC\nC     FIB - FIBER ORIENTATION\n             DNORM=DSQRT(FIB(INOEL,2) FIB(INOEL,2)+\n     1                   FIB(INOEL,3) FIB(INOEL,3)+\n     2                   FIB(INOEL,4)*FIB(INOEL,4))\nC\nC       UNDERFORMED FIBER ORIENTATION TENSOR\nC\n        DO I1=1,NDI\n        J1=I1+1\nC       FIBER ORIENTATION NORMALIZED VECTOR - FAMILY 1\n        VORIF(I1)=FIB(INOEL,J1)/DNORM\n        END DO\nC DO I=1,NDI SUM1=ZERO DO J=1,NDI SUM1=SUM1+DFGRD1(I,J)*VORIF(J) ENDDO C     FIBER DIRECTIONS IN THE DEFORMED CONFIGURATION\nC               -FAMILY 1\n         VD(I)=SUM1\n      ENDDO\n      DNORM=DSQRT(VD(1) VD(1)+\n     1             VD(2) VD(2)+\n     2             VD(3) VD(3))\nC           COSINE OF THE ANGLE BETWEEN FIBERS\nC\nC\nC--------------------------------------------------------------------------\n      DO I=1,NDI\n       DO J=1,NDI\nC       STRUCTURAL TENSOR - FAMILY 1\n       ST0(I,J)=VORIF(I) VORIF(J)\n       END DO\n      END DO\nC\nC       STRUCTURE TENSOR IN THE DEFORMED CONFIGURATION - FAMILY 1\n      ST=MATMUL(ST0,TRANSPOSE(DISTGR))\n      ST=MATMUL(DISTGR,ST)\nC\nC\n      RETURN\n      END SUBROUTINE FIBDIR\n      SUBROUTINE FSLIP(F,FBAR,DET,NDI)\nC>     DISTORTION GRADIENT\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI,I1,J1\n      DOUBLE PRECISION F(NDI,NDI),FBAR(NDI,NDI)\n      DOUBLE PRECISION DET,SCALE1\nC C     JACOBIAN DETERMINANT\n      DET = F(1,1) * F(2,2) * F(3,3)\n     1    - F(1,2) * F(2,1) * F(3,3)\nC\n      IF (NDI .EQ. 3) THEN\n          DET = DET + F(1,2) * F(2,3) * F(3,1)\n     1              + F(1,3) * F(3,2) * F(2,1)\n     2              - F(1,3) * F(3,1) * F(2,2)\n     3              - F(2,3) * F(3,2) * F(1,1)\n      END IF \nC\n      SCALE1=DET (-ONE /THREE)\nC DO I1=1,NDI\n        DO J1=1,NDI\n          FBAR(I1,J1)=SCALE1 F(I1,J1)\n        END DO\n      END DO\nC\n      RETURN END SUBROUTINE FSLIP\n      SUBROUTINE HFILFIC(H,HH,PP,LAMBDA,M,RW,NDI)\nC>      NON-AFFINE NETWORK: STRUCTURE TENSORS\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI,I1,J1,K1,L1\n      DOUBLE PRECISION HH(NDI,NDI,NDI,NDI),M(NDI),H(NDI,NDI)\n      DOUBLE PRECISION RW,LAMBDA,AUX0,AUX,PP,PI,AUX1\nC\n      PI=FOUR ATAN(ONE)\n      AUX0=FOUR*PI\n      AUX=(LAMBDA (PP-TWO)) RW\n      AUX1=(PP-TWO) (LAMBDA (PP-FOUR)) RW\nC DO I1=1,NDI\n       DO J1=1,NDI\n        H(I1,J1)=AUX M(I1) M(J1)\n        DO K1=1,NDI\n         DO L1=1,NDI\n          HH(I1,J1,K1,L1)=AUX1 M(I1) M(J1) M(K1)*M(L1)\n         END DO\n        END DO\n       END DO\n      END DO\nC\n      RETURN END SUBROUTINE HFILFIC SUBROUTINE HVREAD(HV,STATEV,V1,NDI) C>    VISCOUS DISSIPATION: READ STATE VARS\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI,V1,POS\n      DOUBLE PRECISION HV(NDI,NDI),STATEV(NSDV)\nC\n        POS=9 V1-9\n        HV(1,1)=STATEV(1+POS)\n        HV(1,2)=STATEV(2+POS)\n        HV(1,3)=STATEV(3+POS)\n        HV(2,1)=STATEV(4+POS)\n        HV(2,2)=STATEV(5+POS)\n        HV(2,3)=STATEV(6+POS)\n        HV(3,1)=STATEV(7+POS)\n        HV(3,2)=STATEV(8+POS)\n        HV(3,3)=STATEV(9+POS) C\n      RETURN\nC END SUBROUTINE HVREAD\n      SUBROUTINE HVWRITE(STATEV,HV,V1,NDI)\nC>    VISCOUS DISSIPATION: WRITE STATE VARS\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI,V1,POS\n      DOUBLE PRECISION HV(NDI,NDI),STATEV(NSDV)\nC\n        POS=9 V1-9\n        STATEV(1+POS)=HV(1,1)\n        STATEV(2+POS)=HV(1,2)\n        STATEV(3+POS)=HV(1,3)\n        STATEV(4+POS)=HV(2,1)\n        STATEV(5+POS)=HV(2,2)\n        STATEV(6+POS)=HV(2,3)\n        STATEV(7+POS)=HV(3,1)\n        STATEV(8+POS)=HV(3,2)\n        STATEV(9+POS)=HV(3,3)\nC\n      RETURN\nC END SUBROUTINE HVWRITE\n      SUBROUTINE ONEM(A,AA,AAS,NDI)\nC\nC>      THIS SUBROUTINE GIVES:\nC>          2ND ORDER IDENTITY TENSORS - A\nC>          4TH ORDER IDENTITY TENSOR - AA\nC>          4TH ORDER SYMMETRIC IDENTITY TENSOR - AAS\nC\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER I,J,K,L,NDI\nC\n      DOUBLE PRECISION A(NDI,NDI),AA(NDI,NDI,NDI,NDI),\n     1                 AAS(NDI,NDI,NDI,NDI)\nC\n      DO I=1,NDI\n         DO J=1,NDI\n            IF (I .EQ. J) THEN\n              A(I,J) = ONE\n            ELSE\n              A(I,J) = ZERO\n            END IF\n         END DO\n      END DO\nC\n      DO I=1,NDI\n         DO J=1,NDI\n          DO K=1,NDI\n             DO L=1,NDI\n              AA(I,J,K,L)=A(I,K) A(J,L)\n              AAS(I,J,K,L)=(ONE/TWO) (A(I,K) A(J,L)+A(I,L) A(J,K))\n           END DO\n          END DO\n        END DO\n      END DO\nC\n      RETURN\n      END SUBROUTINE ONEM\n      SUBROUTINE INDEXX(STRESS,DDSDDE,SIG,TNG,NTENS,NDI)\nC>    INDEXATION: FULL SIMMETRY  IN STRESSES AND ELASTICITY TENSORS\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER II1(6),II2(6),NTENS,NDI,I1,J1\n      DOUBLE PRECISION STRESS(NTENS),DDSDDE(NTENS,NTENS)\n      DOUBLE PRECISION SIG(NDI,NDI),TNG(NDI,NDI,NDI,NDI)\n      DOUBLE PRECISION PP1,PP2\nC\n      II1(1)=1\n      II1(2)=2\n      II1(3)=3\n      II1(4)=1\n      II1(5)=1\n      II1(6)=2\nC\n      II2(1)=1\n      II2(2)=2\n      II2(3)=3\n      II2(4)=2\n      II2(5)=3\n      II2(6)=3\nC\n      DO I1=1,NTENS\nC       STRESS VECTOR\n         STRESS(I1)=SIG(II1(I1),II2(I1))\n         DO J1=1,NTENS\nC       DDSDDE - FULLY SIMMETRY IMPOSED\n            PP1=TNG(II1(I1),II2(I1),II1(J1),II2(J1))\n            PP2=TNG(II1(I1),II2(I1),II2(J1),II1(J1))\n            DDSDDE(I1,J1)=(ONE/TWO) (PP1+PP2)\n         END DO\n      END DO\nC\n      RETURN\nC\n      END SUBROUTINE INDEXX\n       SUBROUTINE INITIALIZE(STATEV,VV)\nC\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC C      COMMON /KCOMMON/KBLOCK\nC\nC      DOUBLE PRECISION TIME(2),KSTEP\n      INTEGER I1,POS,POS1,POS2,POS3,VV\n      DOUBLE PRECISION STATEV(NSDV)\nC        VISCOUS TENSORS\n       DO I1=1,VV\n        POS=9 I1-9\n        STATEV(1+POS)=ZERO\n        STATEV(2+POS)=ZERO\n        STATEV(3+POS)=ZERO\n        STATEV(4+POS)=ZERO\n        STATEV(5+POS)=ZERO\n        STATEV(6+POS)=ZERO\n        STATEV(7+POS)=ZERO\n        STATEV(8+POS)=ZERO\n        STATEV(9+POS)=ZERO\n       ENDDO STATEV(POS+10)=ONE C RETURN\nC\n      END SUBROUTINE INITIALIZE\n      SUBROUTINE INVARIANTS(A,INV1,INV2,NDI)\nC>    1ST AND 2ND INVARIANTS OF A TENSOR\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI,I1\n      DOUBLE PRECISION A(NDI,NDI),AA(NDI,NDI)\n      DOUBLE PRECISION INV1,INV1AA, INV2\nC\n      INV1=ZERO\n      INV1AA=ZERO\n      AA=MATMUL(A,A)\n      DO I1=1,NDI\n         INV1=INV1+A(I1,I1)\n         INV1AA=INV1AA+AA(I1,I1)\n      END DO\n         INV2=(ONE/TWO) (INV1 INV1-INV1AA)\nC\n      RETURN\n      END SUBROUTINE INVARIANTS\n      SUBROUTINE ISOMAT(SSEISO,DISO,C10,C01,CBARI1,CBARI2)\nC>     ISOTROPIC MATRIX : ISOCHORIC SEF AND DERIVATIVES\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      DOUBLE PRECISION SSEISO,DISO(5)\n      DOUBLE PRECISION C10,C01,CBARI1,CBARI2\nC\n      SSEISO=C10 (CBARI1-THREE)+C01 (CBARI2-THREE)\nC\n      !FIRST DERIVATIVE OF SSEISO IN ORDER TO I1\n      DISO(1)=C10\n      !FIRST DERIVATIVE OF SSEISO IN ORDER TO I2\n      DISO(2)=C01\n      !SECOND DERIVATIVE OF SSEISO IN ORDER TO I1\n      DISO(3)=ZERO\n      !SECOND DERIVATIVE OF SSEISO IN ORDER TO I2\n      DISO(4)=ZERO\n      !SECOND DERIVATIVE OF SSEISO IN ORDER TO I1 AND I2\n      DISO(5)=ZERO\nC\n      RETURN\n      END SUBROUTINE ISOMAT\n      SUBROUTINE METISO(CMISO,CMFIC,PL,PKISO,PKFIC,C,UNIT2,DET,NDI)\nC>    ISOCHORIC MATERIAL ELASTICITY TENSOR\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI,I1,J1,K1,L1\n      DOUBLE PRECISION UNIT2(NDI,NDI),PL(NDI,NDI,NDI,NDI),\n     1                 CMISO(NDI,NDI,NDI,NDI),PKISO(NDI,NDI),\n     2                 CMFIC(NDI,NDI,NDI,NDI),PKFIC(NDI,NDI),\n     3                 CISOAUX(NDI,NDI,NDI,NDI),\n     4                 CISOAUX1(NDI,NDI,NDI,NDI),C(NDI,NDI),\n     5                 PLT(NDI,NDI,NDI,NDI),CINV(NDI,NDI),\n     6                 PLL(NDI,NDI,NDI,NDI)\n      DOUBLE PRECISION TRFIC,XX,YY,ZZ,DET,AUX,AUX1\nC\n      CALL MATINV3D(C,CINV,NDI)\n      CISOAUX1=ZERO\n      CISOAUX=ZERO\n      CALL CONTRACTION44(CISOAUX1,PL,CMFIC,NDI)\nC C  transpose of lagrangian projection tensor DO I1=1,NDI\n        DO J1=1,NDI\n           DO K1=1,NDI\n              DO L1=1,NDI\n                PLT(I1,J1,K1,L1)=PL(K1,L1,I1,J1)\n              END DO\n            END DO\n         END DO\n      END DO\nC\n      CALL CONTRACTION44(CISOAUX,CISOAUX1,PLT,NDI)\nC\n      TRFIC=ZERO\n      AUX=DET (-TWO/THREE)\n      AUX1=AUX TWO\n      DO I1=1,NDI\n         TRFIC=TRFIC+AUX PKFIC(I1,I1) C(I1,I1)\n      END DO\nC\n      DO I1=1,NDI\n        DO J1=1,NDI\n           DO K1=1,NDI\n              DO L1=1,NDI\n                XX=AUX1 CISOAUX(I1,J1,K1,L1)\n                PLL(I1,J1,K1,L1)=(ONE/TWO) (CINV(I1,K1) CINV(J1,L1)+\n     1                                      CINV(I1,L1) CINV(J1,K1))-\n     2                           (ONE/THREE) CINV(I1,J1) CINV(K1,L1)\n                YY=TRFIC PLL(I1,J1,K1,L1)\n                ZZ=PKISO(I1,J1) CINV(K1,L1)+CINV(I1,J1) PKISO(K1,L1)\nC\n                CMISO(I1,J1,K1,L1)=XX+(TWO/THREE) YY-(TWO/THREE) ZZ\n              END DO\n           END DO\n        END DO\n      END DO\nC\n      RETURN\n      END SUBROUTINE METISO\n      SUBROUTINE METVOL(CVOL,C,PV,PPV,DET,NDI)\nC>    VOLUMETRIC MATERIAL ELASTICITY TENSOR\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI,I1,J1,K1,L1\n      DOUBLE PRECISION C(NDI,NDI),CINV(NDI,NDI),\n     1                 CVOL(NDI,NDI,NDI,NDI)\n      DOUBLE PRECISION PV,PPV,DET\nC\n      CALL MATINV3D(C,CINV,NDI)\nC\n      DO I1 = 1, NDI\n        DO J1 = 1, NDI\n         DO K1 = 1, NDI\n           DO L1 = 1, NDI\n             CVOL(I1,J1,K1,L1)=\n     1                 DET PPV CINV(I1,J1) CINV(K1,L1)\n     2           -DET PV (CINV(I1,K1) CINV(J1,L1)\n     3                      +CINV(I1,L1) CINV(J1,K1))\n           END DO\n         END DO\n        END DO\n      END DO\nC\n      RETURN\n      END SUBROUTINE METVOL\n      SUBROUTINE MATINV3D(A,A_INV,NDI)\nC>    INVERSE OF A 3X3 MATRIX\nC     RETURN THE INVERSE OF A(3,3) - A_INV\n      IMPLICIT NONE\nC\n      INTEGER NDI\nC\n      DOUBLE PRECISION A(NDI,NDI),A_INV(NDI,NDI),DET_A,DET_A_INV\nC\n      DET_A = A(1,1) (A(2,2) A(3,3) - A(3,2) A(2,3)) -\n     +        A(2,1) (A(1,2) A(3,3) - A(3,2) A(1,3)) +\n     +        A(3,1) (A(1,2) A(2,3) - A(2,2)*A(1,3)) IF (DET_A .LE. 0.D0) THEN WRITE(*,*) 'WARNING: SUBROUTINE MATINV3D:' WRITE(*,*) 'WARNING: DET OF MAT=',DET_A RETURN END IF C\n      DET_A_INV = 1.D0/DET_A\nC\n      A_INV(1,1) = DET_A_INV (A(2,2) A(3,3)-A(3,2) A(2,3))\n      A_INV(1,2) = DET_A_INV (A(3,2) A(1,3)-A(1,2) A(3,3))\n      A_INV(1,3) = DET_A_INV (A(1,2) A(2,3)-A(2,2) A(1,3))\n      A_INV(2,1) = DET_A_INV (A(3,1) A(2,3)-A(2,1) A(3,3))\n      A_INV(2,2) = DET_A_INV (A(1,1) A(3,3)-A(3,1) A(1,3))\n      A_INV(2,3) = DET_A_INV (A(2,1) A(1,3)-A(1,1) A(2,3))\n      A_INV(3,1) = DET_A_INV (A(2,1) A(3,2)-A(3,1) A(2,2))\n      A_INV(3,2) = DET_A_INV (A(3,1) A(1,2)-A(1,1) A(3,2))\n      A_INV(3,3) = DET_A_INV (A(1,1) A(2,2)-A(2,1) A(1,2))\nC\n      RETURN\n      END SUBROUTINE MATINV3D\n      SUBROUTINE PINVARIANTS(A,INV4,NDI,ST,LAMBDA,BARLAMBDA,DET)\nC>    AND 4TH PSEUDO-INVARIANTS OF A TENSOR\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI,I,J\n      DOUBLE PRECISION A(NDI,NDI),DET,SCALE1,ST(NDI,NDI),LAMBDA\n      DOUBLE PRECISION BARLAMBDA,INV4\nC\n        INV4=ZERO\n      DO I=1,NDI\n        DO J=1, NDI\n            INV4=INV4+A(I,J) ST(I,J)\n        ENDDO\n      ENDDO\nC     STRETCH\n      SCALE1=DET (-ONE /THREE)\n      BARLAMBDA=DSQRT(INV4)\n      LAMBDA=BARLAMBDA/SCALE1\nC\n      RETURN\n      END SUBROUTINE PINVARIANTS\n      SUBROUTINE PK2ANISOMATFIC(AFIC,DANISO,CBAR,INV4,ST0,NDI)\nC>      ANISOTROPIC MATRIX: 2PK 'FICTICIOUS' STRESS TENSOR\nC       INPUT:\nC       DANISO - ANISOTROPIC STRAIN-ENERGY DERIVATIVES\nC       CBAR - DEVIATORIC LEFT CAUCHY-GREEN TENSOR\nC       INV1,INV4 -CBAR INVARIANTS\nC       UNIT2 - 2ND ORDER IDENTITY TENSOR\nC       OUTPUT:\nC       AFIC - 2ND PIOLA KIRCHOOF 'FICTICIOUS' STRESS TENSOR\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI\n      DOUBLE PRECISION AFIC(NDI,NDI),DANISO(3),CBAR(3,3)\n      DOUBLE PRECISION DUDI4,DI4DC(3,3),INV4\n      DOUBLE PRECISION ST0(3,3)\nC\nC\nC-----------------------------------------------------------------------------\n      !FIRST DERIVATIVE OF SSEANISO IN ORDER TO I4\n      DUDI4=DANISO(1)\nC\n      DI4DC=ST0\nC\n      AFIC=TWO (DUDI4 DI4DC)\nC\n      RETURN\n      END SUBROUTINE PK2ANISOMATFIC\n      SUBROUTINE PK2ISO(PKISO,PKFIC,PL,DET,NDI)\nC>    ISOCHORIC PK2 STRESS TENSOR\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI,I1,J1\n      DOUBLE PRECISION PKISO(NDI,NDI),\n     1                 PL(NDI,NDI,NDI,NDI),PKFIC(NDI,NDI)\n      DOUBLE PRECISION DET,SCALE2 C\n      CALL CONTRACTION42(PKISO,PL,PKFIC,NDI)\nC\n      SCALE2=DET (-TWO/THREE)\n      DO I1=1,NDI\n        DO J1=1,NDI\n          PKISO(I1,J1)=SCALE2 PKISO(I1,J1)\n        END DO\n      END DO\nC\n      RETURN\n      END SUBROUTINE PK2ISO\n      SUBROUTINE PK2ISOMATFIC(FIC,DISO,CBAR,CBARI1,UNIT2,NDI)\nC>     ISOTROPIC MATRIX: 2PK 'FICTICIOUS' STRESS TENSOR\nC      INPUT:\nC       DISO - STRAIN-ENERGY DERIVATIVES\nC       CBAR - DEVIATORIC LEFT CAUCHY-GREEN TENSOR\nC       CBARI1,CBARI2 - CBAR INVARIANTS\nC       UNIT2 - 2ND ORDER IDENTITY TENSOR\nC      OUTPUT:\nC       FIC - 2ND PIOLA KIRCHOOF 'FICTICIOUS' STRESS TENSOR\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER I1,J1,NDI\n      DOUBLE PRECISION FIC(NDI,NDI),DISO(5),CBAR(NDI,NDI),UNIT2(NDI,NDI)\n      DOUBLE PRECISION DUDI1,DUDI2,CBARI1\n      DOUBLE PRECISION AUX1,AUX2 C\n      DUDI1=DISO(1)\n      DUDI2=DISO(2)\nC\n      AUX1=TWO (DUDI1+CBARI1 DUDI2)\n      AUX2=-TWO DUDI2\nC\n      DO I1=1,NDI\n       DO J1=1,NDI\n        FIC(I1,J1)=AUX1 UNIT2(I1,J1)+AUX2 CBAR(I1,J1)\n       END DO\n      END DO\nC\n      RETURN\n      END SUBROUTINE PK2ISOMATFIC\n      SUBROUTINE PK2VOL(PKVOL,PV,C,NDI)\nC>    VOLUMETRIC PK2 STRESS\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI,I1,J1\n      DOUBLE PRECISION PKVOL(NDI,NDI),C(NDI,NDI),CINV(NDI,NDI)\n      DOUBLE PRECISION PV\nC\n      CALL MATINV3D(C,CINV,NDI)\nC\n      DO I1=1,NDI\n        DO J1=1,NDI\n          PKVOL(I1,J1)=PV CINV(I1,J1)\n        END DO\n      END DO\nC\n      RETURN\n      END SUBROUTINE PK2VOL\n      SUBROUTINE PROJEUL(A,AA,PE,NDI)\nC>    EULERIAN PROJECTION TENSOR\nC      INPUTS:\nC          IDENTITY TENSORS - A, AA\nC      OUTPUTS:\nC          4TH ORDER SYMMETRIC EULERIAN PROJECTION TENSOR - PE\nC\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER I,J,K,L,NDI\nC\n      DOUBLE PRECISION A(NDI,NDI),AA(NDI,NDI,NDI,NDI),\n     1                 PE(NDI,NDI,NDI,NDI)\nC\n      DO I=1,NDI\n         DO J=1,NDI\n          DO K=1,NDI\n             DO L=1,NDI\n              PE(I,J,K,L)=AA(I,J,K,L)-(ONE/THREE) (A(I,J) A(K,L))\n           END DO\n          END DO\n        END DO\n      END DO\nC\n      RETURN\n      END SUBROUTINE PROJEUL\n      SUBROUTINE PROJLAG(C,AA,PL,NDI)\nC>    LAGRANGIAN PROJECTION TENSOR\nC      INPUTS:\nC          IDENTITY TENSORS - A, AA\nC          ISOCHORIC LEFT CAUCHY GREEN TENSOR - C\nC          INVERSE OF C - CINV\nC      OUTPUTS:\nC          4TH ORDER SYMMETRIC LAGRANGIAN PROJECTION TENSOR - PL\nC\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER I,J,K,L,NDI\nC\n      DOUBLE PRECISION CINV(NDI,NDI),AA(NDI,NDI,NDI,NDI),\n     1                 PL(NDI,NDI,NDI,NDI),C(NDI,NDI)\nC\n      CALL MATINV3D(C,CINV,NDI)\nC\n      DO I=1,NDI\n         DO J=1,NDI\n          DO K=1,NDI\n             DO L=1,NDI\n              PL(I,J,K,L)=AA(I,J,K,L)-(ONE/THREE) (CINV(I,J) C(K,L))\n           END DO\n          END DO\n        END DO\n      END DO\nC\n      RETURN\n      END SUBROUTINE PROJLAG\n      SUBROUTINE PULL2(PK,SIG,FINV,DET,NDI)\nC>       PULL-BACK TIMES DET OF A 2ND ORDER TENSOR\n       IMPLICIT NONE\n       INCLUDE 'PARAM_UMAT.INC'\nC\n       INTEGER I1,J1,II1,JJ1,NDI\n       DOUBLE PRECISION PK(NDI,NDI),FINV(NDI,NDI)\n       DOUBLE PRECISION SIG(NDI,NDI)\n       DOUBLE PRECISION AUX,DET\nC\n       DO I1=1,NDI\n        DO J1=1,NDI\n          AUX=ZERO\n         DO II1=1,NDI\n          DO JJ1=1,NDI\n            AUX=AUX+DET FINV(I1,II1) FINV(J1,JJ1) SIG(II1,JJ1)\n         END DO\n        END DO\n           PK(I1,J1)=AUX\n        END DO\n       END DO\nC\n       RETURN\n      END SUBROUTINE PULL2\n      SUBROUTINE PULL4(MAT,SPATIAL,FINV,DET,NDI)\nC>        PULL-BACK TIMES DET OF 4TH ORDER TENSOR\n       IMPLICIT NONE\n       INCLUDE 'PARAM_UMAT.INC'\nC\n       INTEGER I1,J1,K1,L1,II1,JJ1,KK1,LL1,NDI\n       DOUBLE PRECISION MAT(NDI,NDI,NDI,NDI),FINV(NDI,NDI)\n       DOUBLE PRECISION SPATIAL(NDI,NDI,NDI,NDI)\n       DOUBLE PRECISION AUX,DET\nC\n       DO I1=1,NDI\n        DO J1=1,NDI\n         DO K1=1,NDI\n          DO L1=1,NDI\n           AUX=ZERO\n           DO II1=1,NDI\n            DO JJ1=1,NDI\n             DO KK1=1,NDI\n              DO LL1=1,NDI\n              AUX=AUX+DET +        FINV(I1,II1) FINV(J1,JJ1) +        FINV(K1,KK1) FINV(L1,LL1) SPATIAL(II1,JJ1,KK1,LL1)\n              END DO\n             END DO\n            END DO\n           END DO\n           MAT(I1,J1,K1,L1)=AUX\n          END DO\n         END DO\n        END DO\n       END DO\nC\n       RETURN\n      END SUBROUTINE PULL4\n      SUBROUTINE PUSH2(SIG,PK,F,DET,NDI)\nC>        PIOLA TRANSFORMATION\nC>      INPUT:\nC>       PK - 2ND PIOLA KIRCHOOF STRESS TENSOR\nC>       F - DEFORMATION GRADIENT\nC>       DET - DEFORMATION DETERMINANT\nC>      OUTPUT:\nC>       SIG - CAUCHY STRESS TENSOR\n       IMPLICIT NONE\n       INCLUDE 'PARAM_UMAT.INC'\nC\n       INTEGER I1,J1,II1,JJ1,NDI\n       DOUBLE PRECISION PK(NDI,NDI),F(NDI,NDI)\n       DOUBLE PRECISION SIG(NDI,NDI)\n       DOUBLE PRECISION AUX,DET\nC\n       DO I1=1,NDI\n        DO J1=1,NDI\n          AUX=ZERO\n         DO II1=1,NDI\n          DO JJ1=1,NDI\n            AUX=AUX+(DET (-ONE)) F(I1,II1) F(J1,JJ1) PK(II1,JJ1)\n         END DO\n        END DO\n           SIG(I1,J1)=AUX\n        END DO\n       END DO\nC\n       RETURN\n      END SUBROUTINE PUSH2\n      SUBROUTINE PUSH4(SPATIAL,MAT,F,DET,NDI)\nC>        PIOLA TRANSFORMATION\nC>      INPUT:\nC>       MAT - MATERIAL ELASTICITY TENSOR\nC>       F - DEFORMATION GRADIENT\nC>       DET - DEFORMATION DETERMINANT\nC>      OUTPUT:\nC>       SPATIAL - SPATIAL ELASTICITY TENSOR\n       IMPLICIT NONE\n       INCLUDE 'PARAM_UMAT.INC'\nC\n       INTEGER I1,J1,K1,L1,II1,JJ1,KK1,LL1,NDI\nC\n       DOUBLE PRECISION MAT(NDI,NDI,NDI,NDI),F(NDI,NDI)\n       DOUBLE PRECISION SPATIAL(NDI,NDI,NDI,NDI)\n       DOUBLE PRECISION AUX,DET\nC\n       DO I1=1,NDI\n        DO J1=1,NDI\n         DO K1=1,NDI\n          DO L1=1,NDI\n           AUX=ZERO\n           DO II1=1,NDI\n            DO JJ1=1,NDI\n             DO KK1=1,NDI\n              DO LL1=1,NDI\n              AUX=AUX+(DET (-ONE)) +        F(I1,II1) F(J1,JJ1) +        F(K1,KK1) F(L1,LL1)*MAT(II1,JJ1,KK1,LL1)\n              END DO\n             END DO\n            END DO\n           END DO\n           SPATIAL(I1,J1,K1,L1)=AUX\n          END DO\n         END DO\n        END DO\n       END DO\nC\n       RETURN\n      END SUBROUTINE PUSH4\n      SUBROUTINE RELAX(QV,HV,AUX1,HV0,PKISO,DTIME,TAU,TETA,NDI)\nC>    VISCOUS DISSIPATION: STRESS RELAXATION TENSORS\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER I1,J1,NDI\n      DOUBLE PRECISION QV(NDI,NDI),HV(NDI,NDI),PKISO(NDI,NDI),\n     1                 HV0(NDI,NDI)\n      DOUBLE PRECISION DTIME,TETA,TAU,AUX1,AUX\nC\n      QV=ZERO\n      HV=ZERO AUX=DEXP(-DTIME*((TWO*TAU)**(-ONE))) AUX1=TETA*AUX DO I1=1,NDI DO J1=1,NDI QV(I1,J1)=HV0(I1,J1)+AUX1*PKISO(I1,J1) HV(I1,J1)=AUX*(AUX*QV(I1,J1)-TETA*PKISO(I1,J1)) END DO END DO C RETURN\n      END SUBROUTINE RELAX\n      SUBROUTINE RESETDFGRD(DFGRD,NDI)\nC\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC' INTEGER NDI DOUBLE PRECISION DFGRD ( NDI , NDI ) DFGRD ( 1 , 1 ) = ONE DFGRD ( 1 , 2 ) = ZERO DFGRD ( 1 , 3 ) = ZERO DFGRD ( 2 , 1 ) = ZERO DFGRD ( 2 , 2 ) = ONE DFGRD ( 2 , 3 ) = ZERO DFGRD ( 3 , 1 ) = ZERO DFGRD ( 3 , 2 ) = ZERO DFGRD ( 3 , 3 ) = ONE END SUBROUTINE ROTATION ( F , R , U , NDI ) C>    COMPUTES ROTATION TENSOR\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI\n      DOUBLE PRECISION F(NDI,NDI),R(NDI,NDI),U(NDI,NDI),UINV(NDI,NDI)\nC\n      CALL MATINV3D(U,UINV,NDI)\nC\n      R = MATMUL(F,UINV)\n      RETURN\n      END SUBROUTINE ROTATION\n      SUBROUTINE SDVREAD(STATEV,VV)\nC>    VISCOUS DISSIPATION: READ STATE VARS\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER VV\n      DOUBLE PRECISION STATEV(NSDV)\nC        read your sdvs here. they should be allocated \nC                after the viscous terms (check hvread)\n!        POS1=9*VV\n!        DO I1=1,NCH\n!         POS2=POS1+I1\n!         FRAC(I1)=STATEV(POS2)\n!        ENDDO\nC C\n      RETURN\nC\n      END SUBROUTINE SDVREAD\n      SUBROUTINE SDVWRITE(DET,STATEV,VV)\nC>    VISCOUS DISSIPATION: WRITE STATE VARS\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER VV,POS1,POS2,POS3,I1\n      DOUBLE PRECISION STATEV(NSDV),DET\nC        write your sdvs here. they should be allocated \nC                after the viscous terms (check hvwrite)\n!        POS1=9*VV\n!        DO I1=1,NCH\n!         POS2=POS1+I1\n!         STATEV(POS2)=FRAC(I1)\n!        ENDDO\n!C\n!        DO I1=1,NWP\n!          POS3=POS2+I1\n!          STATEV(POS3)=RU0(I1)\n!        ENDDO\n!        STATEV(POS3+1)=DET\n!        STATEV(POS3+2)=VARACT \n!        STATEV(POS3+3)=DIRMAX(1)\n!        STATEV(POS3+4)=DIRMAX(2)\n!        STATEV(POS3+5)=DIRMAX(3)\n      RETURN\nC\n      END SUBROUTINE SDVWRITE\n      SUBROUTINE SETISO(CISO,CFIC,PE,SISO,SFIC,UNIT2,NDI)\nC>    ISOCHORIC SPATIAL ELASTICITY TENSOR\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI,I1,J1,K1,L1\n      DOUBLE PRECISION UNIT2(NDI,NDI),PE(NDI,NDI,NDI,NDI),\n     1                 CISO(NDI,NDI,NDI,NDI),SISO(NDI,NDI),\n     2                 CFIC(NDI,NDI,NDI,NDI),SFIC(NDI,NDI),\n     3                 CISOAUX(NDI,NDI,NDI,NDI),\n     4                 CISOAUX1(NDI,NDI,NDI,NDI)\n      DOUBLE PRECISION TRFIC,XX,YY,ZZ\nC\n      CISOAUX1=ZERO\n      CISOAUX=ZERO CALL CONTRACTION44(CISOAUX1,PE,CFIC,NDI) CALL CONTRACTION44(CISOAUX,CISOAUX1,PE,NDI) C\n      TRFIC=ZERO\n      DO I1=1,NDI\n         TRFIC=TRFIC+SFIC(I1,I1)\n      END DO\nC\n      DO I1=1,NDI\n        DO J1=1,NDI\n           DO K1=1,NDI\n              DO L1=1,NDI\n                XX=CISOAUX(I1,J1,K1,L1)\n                YY=TRFIC PE(I1,J1,K1,L1)\n                ZZ=SISO(I1,J1) UNIT2(K1,L1)+UNIT2(I1,J1) SISO(K1,L1)\nC CISO(I1,J1,K1,L1)=XX+(TWO/THREE) YY-(TWO/THREE) ZZ\n              END DO\n           END DO\n        END DO\n      END DO\nC\n      RETURN\n      END SUBROUTINE SETISO\n      SUBROUTINE SETJR(CJR,SIGMA,UNIT2,NDI)\nC>    JAUMAN RATE CONTRIBUTION FOR THE SPATIAL ELASTICITY TENSOR\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI,I1,J1,K1,L1\n      DOUBLE PRECISION UNIT2(NDI,NDI),\n     1                 CJR(NDI,NDI,NDI,NDI),SIGMA(NDI,NDI)\nC\n      DO I1 = 1, NDI\n        DO J1 = 1, NDI\n         DO K1 = 1, NDI\n           DO L1 = 1, NDI\n              CJR(I1,J1,K1,L1)=\n     1             (ONE/TWO) (UNIT2(I1,K1) SIGMA(J1,L1)\n     2             +SIGMA(I1,K1) UNIT2(J1,L1)+UNIT2(I1,L1) SIGMA(J1,K1)\n     3             +SIGMA(I1,L1) UNIT2(J1,K1))\n           END DO\n         END DO\n        END DO\n      END DO\nC\n      RETURN\n      END SUBROUTINE SETJR\n      SUBROUTINE SETVOL(CVOL,PV,PPV,UNIT2,UNIT4S,NDI)\nC>    VOLUMETRIC SPATIAL ELASTICITY TENSOR\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI,I1,J1,K1,L1\n      DOUBLE PRECISION UNIT2(NDI,NDI),UNIT4S(NDI,NDI,NDI,NDI),\n     1                 CVOL(NDI,NDI,NDI,NDI)\n      DOUBLE PRECISION PV,PPV\nC\n      DO I1 = 1, NDI\n        DO J1 = 1, NDI\n         DO K1 = 1, NDI\n           DO L1 = 1, NDI\n             CVOL(I1,J1,K1,L1)=\n     1                 PPV UNIT2(I1,J1) UNIT2(K1,L1)\n     2                 -TWO PV UNIT4S(I1,J1,K1,L1)\n           END DO\n         END DO\n        END DO\n      END DO\nC RETURN\n      END SUBROUTINE SETVOL\n      SUBROUTINE SIGFILFIC(SFIC,RHO,LAMBDA,DW,M,RW,NDI)\nC>    SINGLE FILAMENT:  'FICTICIUOUS' CAUCHY STRESS \n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI,I1,J1\n      DOUBLE PRECISION SFIC(NDI,NDI),M(NDI)\n      DOUBLE PRECISION RHO,AUX,DW,RW,LAMBDA\nC\n      AUX=RHO LAMBDA (-ONE) RW DW\n      DO I1=1,NDI\n       DO J1=1,NDI\n        SFIC(I1,J1)=AUX M(I1) M(J1)\n       END DO\n      END DO\nC\n      RETURN\n      END SUBROUTINE SIGFILFIC\n      SUBROUTINE SIGISO(SISO,SFIC,PE,NDI)\nC>    ISOCHORIC CAUCHY STRESS \n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI\n      DOUBLE PRECISION SISO(NDI,NDI),\n     1                 PE(NDI,NDI,NDI,NDI),SFIC(NDI,NDI)\nC\n      CALL CONTRACTION42(SISO,PE,SFIC,NDI)\nC\n      RETURN\n      END SUBROUTINE SIGISO\n      SUBROUTINE SIGISOMATFIC(SFIC,PKFIC,F,DET,NDI)\nC>    ISOTROPIC MATRIX:  ISOCHORIC CAUCHY STRESS \n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI\n      DOUBLE PRECISION SFIC(NDI,NDI),F(NDI,NDI),\n     1                 PKFIC(NDI,NDI)\n      DOUBLE PRECISION DET\nC\n      CALL PUSH2(SFIC,PKFIC,F,DET,NDI)\nC\n      RETURN\n      END SUBROUTINE SIGISOMATFIC\n      SUBROUTINE SIGVOL(SVOL,PV,UNIT2,NDI)\nC>    VOLUMETRIC CAUCHY STRESS \n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI,I1,J1\n      DOUBLE PRECISION UNIT2(NDI,NDI),SVOL(NDI,NDI)\n      DOUBLE PRECISION PV\nC\n      DO I1=1,NDI\n        DO J1=1,NDI\n          SVOL(I1,J1)=PV UNIT2(I1,J1)\n        END DO\n      END DO\nC\n      RETURN\n      END SUBROUTINE SIGVOL\n      SUBROUTINE SPECTRAL(A,D,V)\nC>    EIGENVALUES AND EIGENVECTOR OF A 3X3 MATRIX\nC     THIS SUBROUTINE CALCULATES THE EIGENVALUES AND EIGENVECTORS OF\nC     A SYMMETRIC 3X3 MATRIX A.\nC\nC     THE OUTPUT CONSISTS OF A VECTOR D CONTAINING THE THREE\nC     EIGENVALUES IN ASCENDING ORDER, AND A MATRIX V WHOSE\nC     COLUMNS CONTAIN THE CORRESPONDING EIGENVECTORS.\nC\n      IMPLICIT NONE\nC\n      INTEGER NP,NROT\n      PARAMETER(NP=3)\nC\n      DOUBLE PRECISION D(3),V(3,3),A(3,3),E(3,3)\nC\n      E = A\nC\n      CALL JACOBI(E,3,NP,D,V,NROT)\n      CALL EIGSRT(D,V,3,NP)\nC\n      RETURN\n      END SUBROUTINE SPECTRAL C * * * * * * * * * * * SUBROUTINE JACOBI(A,N,NP,D,V,NROT) C\nC COMPUTES ALL EIGENVALUES AND EIGENVECTORS OF A REAL SYMMETRIC\nC  MATRIX A, WHICH IS OF SIZE N BY N, STORED IN A PHYSICAL\nC  NP BY NP ARRAY.  ON OUTPUT, ELEMENTS OF A ABOVE THE DIAGONAL\nC  ARE DESTROYED, BUT THE DIAGONAL AND SUB-DIAGONAL ARE UNCHANGED\nC  AND GIVE FULL INFORMATION ABOUT THE ORIGINAL SYMMETRIC MATRIX.\nC  VECTOR D RETURNS THE EIGENVALUES OF A IN ITS FIRST N ELEMENTS.\nC  V IS A MATRIX WITH THE SAME LOGICAL AND PHYSICAL DIMENSIONS AS\nC  A WHOSE COLUMNS CONTAIN, UPON OUTPUT, THE NORMALIZED\nC  EIGENVECTORS OF A.  NROT RETURNS THE NUMBER OF JACOBI ROTATION\nC  WHICH WERE REQUIRED.\nC\nC THIS SUBROUTINE IS TAKEN FROM 'NUMERICAL RECIPES.'\nC\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER IP,IQ,N,NMAX,NP,NROT,I,J\n      PARAMETER (NMAX=100)\nC\n      DOUBLE PRECISION A(NP,NP),D(NP),V(NP,NP),B(NMAX),Z(NMAX),\n     +  SM,TRESH,G,T,H,THETA,S,C,TAU C INITIALIZE V TO THE IDENTITY MATRIX\n      DO I=1,3\n          V(I,I)=ONE\n        DO J=1,3\n          IF (I.NE.J)THEN\n           V(I,J)=ZERO\n         ENDIF\n       END DO\n      END DO\nC INITIALIZE B AND D TO THE DIAGONAL OF A, AND Z TO ZERO.\nC  THE VECTOR Z WILL ACCUMULATE TERMS OF THE FORM T*A_PQ AS\nC  IN EQUATION (11.1.14)\nC\n      DO IP = 1,N\n        B(IP) = A(IP,IP)\n        D(IP) = B(IP)\n        Z(IP) = 0.D0\n      END DO C BEGIN ITERATION\nC\n      NROT = 0\n      DO I=1,50\nC\nC         SUM OFF-DIAGONAL ELEMENTS\nC\n          SM = 0.D0\n          DO IP=1,N-1\n            DO IQ=IP+1,N\n              SM = SM + DABS(A(IP,IQ))\n            END DO\n          END DO\nC\nC          IF SM = 0., THEN RETURN.  THIS IS THE NORMAL RETURN,\nC          WHICH RELIES ON QUADRATIC CONVERGENCE TO MACHINE\nC          UNDERFLOW.\nC\n          IF (SM.EQ.0.D0) RETURN\nC\nC          IN THE FIRST THREE SWEEPS CARRY OUT THE PQ ROTATION ONLY IF\nC           |A_PQ| > TRESH, WHERE TRESH IS SOME THRESHOLD VALUE,\nC           SEE EQUATION (11.1.25).  THEREAFTER TRESH = 0.\nC\n          IF (I.LT.4) THEN\n            TRESH = 0.2D0 SM/N 2\n          ELSE\n            TRESH = 0.D0\n          END IF\nC\n          DO IP=1,N-1\n            DO IQ=IP+1,N\n              G = 100.D0 DABS(A(IP,IQ))\nC\nC              AFTER FOUR SWEEPS, SKIP THE ROTATION IF THE\nC               OFF-DIAGONAL ELEMENT IS SMALL.\nC\n              IF ((I.GT.4).AND.(DABS(D(IP))+G.EQ.DABS(D(IP)))\n     +            .AND.(DABS(D(IQ))+G.EQ.DABS(D(IQ)))) THEN\n                A(IP,IQ) = 0.D0\n              ELSE IF (DABS(A(IP,IQ)).GT.TRESH) THEN\n                H = D(IQ) - D(IP)\n                IF (DABS(H)+G.EQ.DABS(H)) THEN\nC\nC                  T = 1./(2. THETA), EQUATION (11.1.10)\nC\n                  T =A(IP,IQ)/H\n                ELSE\n                  THETA = 0.5D0 H/A(IP,IQ)\n                  T =1.D0/(DABS(THETA)+DSQRT(1.D0+THETA 2.D0))\n                  IF (THETA.LT.0.D0) T = -T\n                END IF\n                C = 1.D0/DSQRT(1.D0 + T 2.D0)\n                S = T C\n                TAU = S/(1.D0 + C)\n                H = T A(IP,IQ)\n                Z(IP) = Z(IP) - H\n                Z(IQ) = Z(IQ) + H\n                D(IP) = D(IP) - H\n                D(IQ) = D(IQ) + H\n                A(IP,IQ) = 0.D0\nC\nC               CASE OF ROTATIONS 1 <= J < P\nC\n                DO J=1,IP-1\n                  G = A(J,IP)\n                  H = A(J,IQ)\n                  A(J,IP) = G - S (H + G TAU)\n                  A(J,IQ) = H + S (G - H TAU)\n                END DO\nC\nC                CASE OF ROTATIONS P < J < Q\nC\n                DO J=IP+1,IQ-1\n                  G = A(IP,J)\n                  H = A(J,IQ)\n                  A(IP,J) = G - S (H + G TAU)\n                  A(J,IQ) = H + S (G - H TAU)\n                END DO\nC\nC                 CASE OF ROTATIONS Q < J <= N\nC\n                DO J=IQ+1,N\n                  G = A(IP,J)\n                  H = A(IQ,J)\n                  A(IP,J) = G - S (H + G TAU)\n                  A(IQ,J) = H + S (G - H TAU)\n                END DO\n                DO J = 1,N\n                  G = V(J,IP)\n                  H = V(J,IQ)\n                  V(J,IP) = G - S (H + G TAU)\n                  V(J,IQ) = H + S (G - H TAU)\n                END DO\n                NROT = NROT + 1\n             END IF\n               END DO\n             END DO\nC\nC          UPDATE D WITH THE SUM OF T A_PQ, AND REINITIALIZE Z\nC\n       DO IP=1,N\n         B(IP) = B(IP) + Z(IP)\n         D(IP) = B(IP)\n         Z(IP) = 0.D0\n       END DO\n      END DO\nC\nC IF THE ALGORITHM HAS REACHED THIS STAGE, THEN THERE\nC  ARE TOO MANY SWEEPS.  PRINT A DIAGNOSTIC AND CUT THE\nC  TIME INCREMENT.\nC\n      WRITE ( ,'(/1X,A/)') '50 ITERATIONS IN JACOBI SHOULD NEVER HAPPEN'\nC\n      RETURN\n      END SUBROUTINE JACOBI C * * * * * * * * * * SUBROUTINE EIGSRT(D,V,N,NP)\nC\nC     GIVEN THE EIGENVALUES D AND EIGENVECTORS V AS OUTPUT FROM\nC     JACOBI, THIS SUBROUTINE SORTS THE EIGENVALUES INTO ASCENDING\nC     ORDER AND REARRANGES THE COLMNS OF V ACCORDINGLY.\nC\nC     THE SUBROUTINE WAS TAKEN FROM 'NUMERICAL RECIPES.'\nC\n      IMPLICIT NONE\nC\n      INTEGER N,NP,I,J,K\nC\n      DOUBLE PRECISION D(NP),V(NP,NP),P\nC\n      DO I=1,N-1\n              K = I\n              P = D(I)\n              DO J=I+1,N\n               IF (D(J).GE.P) THEN\n                K = J\n                P = D(J)\n               END IF\n              END DO\n              IF (K.NE.I) THEN\n               D(K) = D(I)\n               D(I) = P\n               DO J=1,N\n                P = V(J,I)\n                V(J,I) = V(J,K)\n                V(J,K) = P\n               END DO\n              END IF\n      END DO\nC\n      RETURN\n      END SUBROUTINE EIGSRT\n      SUBROUTINE STRETCH(C,B,U,V,NDI)\nC>    STRETCH TENSORS\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER NDI\n      DOUBLE PRECISION C(NDI,NDI),B(NDI,NDI),U(NDI,NDI),V(NDI,NDI)\n      DOUBLE PRECISION EIGVAL(NDI),OMEGA(NDI),EIGVEC(NDI,NDI)\nC\n      CALL SPECTRAL(C,OMEGA,EIGVEC)\nC\n      EIGVAL(1) = DSQRT(OMEGA(1))\n      EIGVAL(2) = DSQRT(OMEGA(2))\n      EIGVAL(3) = DSQRT(OMEGA(3))\nC\n      U(1,1) = EIGVAL(1)\n      U(2,2) = EIGVAL(2)\n      U(3,3) = EIGVAL(3)\nC\n      U = MATMUL(MATMUL(EIGVEC,U),TRANSPOSE(EIGVEC))\nC\n      CALL SPECTRAL(B,OMEGA,EIGVEC)\nC\n      EIGVAL(1) = DSQRT(OMEGA(1))\n      EIGVAL(2) = DSQRT(OMEGA(2))\n      EIGVAL(3) = DSQRT(OMEGA(3)) C      write( , ) eigvec(1,1),eigvec(2,1),eigvec(3,1)\nC\n      V(1,1) = EIGVAL(1)\n      V(2,2) = EIGVAL(2)\n      V(3,3) = EIGVAL(3)\nC\n      V = MATMUL(MATMUL(EIGVEC,V),TRANSPOSE(EIGVEC))\n      RETURN\n      END SUBROUTINE STRETCH\n       SUBROUTINE TENSORPROD2(A,B,C,NDI)\nC\n       Implicit None\nC\n       INTEGER I,J,K,L,NDI\nC\n       DOUBLE PRECISION A(NDI,NDI),B(NDI,NDI),C(NDI,NDI,NDI,NDI)\nC\n      DO I=1,NDI\n       DO J=1,NDI\n         DO K=1,NDI\n          DO L=1,NDI\n          C(I,J,K,L)=A(I,J) B(K,L)\n          END DO\n         END DO\n       END DO\n      END DO\nC\n      RETURN\nC\n      end SUBROUTINE TENSORPROD2\n      SUBROUTINE UEXTERNALDB(LOP,LRESTART,TIME,DTIME,KSTEP,KINC)\nC>    READ MESH DATA\n      INCLUDE 'ABA_PARAM.INC'\n      INCLUDE 'PARAM_UMAT.INC'\nC\nC     UEXTERNAL just called once; work in parallel computing\nC     ADD COMMON BLOCKS HERE IF NEEDED (and in UMAT)\nC      COMMON /KBLOCK/KBLOCK\n      COMMON /KFIB/FIBORI\nC REAL 8 DTIME\n      DIMENSION TIME(2)\n      CHARACTER(256) FILENAME\n      CHARACTER(256) JOBDIR\n      INTEGER  LENJOBDIR REAL*8 FIBORI(NELEM,4) C     LOP=0 --> START OF THE ANALYSIS\n      IF(LOP.EQ.0.OR.LOP.EQ.4) THEN\nC\n       CALL GETOUTDIR(JOBDIR,LENJOBDIR)\nC        DIR1 DEFNIED IN PARAM_UMAT.INC\n         FILENAME=JOBDIR(:LENJOBDIR)//'/'//DIR1\nC\n         OPEN(15,FILE=FILENAME)\n         DO I=1,NELEM\n            READ(15, ) (FIBORI(I,J),J=1,4)\n         END DO\n          CLOSE(15)\n!C END IF C\n      RETURN\nC\n      END SUBROUTINE UEXTERNALDB\n      SUBROUTINE VISCO(PK,CMAT,VV,PKVOL,PKISO,CMATVOL,CMATISO,DTIME,\n     1                                              VSCPROPS,STATEV,NDI)\nC>    VISCOUS DISSIPATION: MAXWELL SPRINGS AND DASHPOTS SCHEME\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      INTEGER I1,J1,K1,L1,NDI,VV,V1\n      DOUBLE PRECISION PK(NDI,NDI),PKVOL(NDI,NDI),PKISO(NDI,NDI),\n     1                  CMAT(NDI,NDI,NDI,NDI),CMATVOL(NDI,NDI,NDI,NDI),\n     2                  CMATISO(NDI,NDI,NDI,NDI),VSCPROPS(6)\n      DOUBLE PRECISION Q(NDI,NDI),QV(NDI,NDI),HV(NDI,NDI),\n     1                  HV0(NDI,NDI),STATEV(NSDV)\n      DOUBLE PRECISION DTIME,TETA,TAU,AUX,AUXC C Q=ZERO\n      QV=ZERO\n      HV=ZERO\n      AUXC=ZERO\nC C     ( GENERAL MAXWELL DASHPOTS)\n      DO V1=1,VV \nC TAU=VSCPROPS(2 V1-1)\n      TETA=VSCPROPS(2*V1)\nC\nC      READ STATE VARIABLES\n      CALL HVREAD(HV,STATEV,V1,NDI) HV0=HV\nC        RALAXATION TENSORS CALL RELAX(QV,HV,AUX,HV0,PKISO,DTIME,TAU,TETA,NDI)\n      AUXC=AUXC+AUX C        WRITE STATE VARIABLES CALL HVWRITE(STATEV,HV,V1,NDI)\nC\n      Q=Q+QV\nC\n      END DO\nC AUXC=ONE+AUXC\n      PK=PKVOL+PKISO\nC DO I1=1,NDI DO J1=1,NDI PK(I1,J1)=PK(I1,J1)+Q(I1,J1) DO K1=1,NDI DO L1=1,NDI CMAT(I1,J1,K1,L1)= CMATVOL(I1,J1,K1,L1)+ 1                        AUXC*CMATISO(I1,J1,K1,L1) ENDDO ENDDO ENDDO ENDDO C\nC\n      RETURN\n      END SUBROUTINE VISCO\n      SUBROUTINE VOL(SSEV,PV,PPV,K,DET)\nC>     VOLUMETRIC CONTRIBUTION :STRAIN ENERGY FUNCTION AND DERIVATIVES\n      IMPLICIT NONE\n      INCLUDE 'PARAM_UMAT.INC'\nC\n      DOUBLE PRECISION SSEV,PV,PPV\n      DOUBLE PRECISION K,G,DET,AUX\nC\n      G=(ONE/FOUR) (DET DET-ONE-TWO LOG(DET))\nC\n      SSEV=K G\nC\n      PV=K (ONE/TWO) (DET-ONE/DET)\n      AUX=K (ONE/TWO) (ONE+ONE/(DET DET))\n      PPV=PV+DET AUX\nC\n      RETURN\n      END SUBROUTINE VOL","tags":"home","loc":"index.html"},{"title":"pull2.for – Fortran Program","text":"Contents Subroutines PULL2 Source Code pull2.for Source Code SUBROUTINE PULL2 ( PK , SIG , FINV , DET , NDI ) C>       PULL-BACK TIMES DET OF A 2ND ORDER TENSOR IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER I1 , J1 , II1 , JJ1 , NDI DOUBLE PRECISION PK ( NDI , NDI ), FINV ( NDI , NDI ) DOUBLE PRECISION SIG ( NDI , NDI ) DOUBLE PRECISION AUX , DET C DO I1 = 1 , NDI DO J1 = 1 , NDI AUX = ZERO DO II1 = 1 , NDI DO JJ1 = 1 , NDI AUX = AUX + DET * FINV ( I1 , II1 ) * FINV ( J1 , JJ1 ) * SIG ( II1 , JJ1 ) END DO END DO PK ( I1 , J1 ) = AUX END DO END DO C RETURN END SUBROUTINE PULL2","tags":"","loc":"sourcefile/pull2.for.html"},{"title":"pinvariants.for – Fortran Program","text":"Contents Subroutines PINVARIANTS Source Code pinvariants.for Source Code SUBROUTINE PINVARIANTS ( A , INV4 , NDI , ST , LAMBDA , BARLAMBDA , DET ) C>    AND 4TH PSEUDO-INVARIANTS OF A TENSOR IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI , I , J DOUBLE PRECISION A ( NDI , NDI ), DET , SCALE1 , ST ( NDI , NDI ), LAMBDA DOUBLE PRECISION BARLAMBDA , INV4 C INV4 = ZERO DO I = 1 , NDI DO J = 1 , NDI INV4 = INV4 + A ( I , J ) * ST ( I , J ) ENDDO ENDDO C     STRETCH SCALE1 = DET ** ( - ONE / THREE ) BARLAMBDA = DSQRT ( INV4 ) LAMBDA = BARLAMBDA / SCALE1 C RETURN END SUBROUTINE PINVARIANTS","tags":"","loc":"sourcefile/pinvariants.for.html"},{"title":"metvol.for – Fortran Program","text":"Contents Subroutines METVOL Source Code metvol.for Source Code SUBROUTINE METVOL ( CVOL , C , PV , PPV , DET , NDI ) C>    VOLUMETRIC MATERIAL ELASTICITY TENSOR IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI , I1 , J1 , K1 , L1 DOUBLE PRECISION C ( NDI , NDI ), CINV ( NDI , NDI ), 1 CVOL ( NDI , NDI , NDI , NDI ) DOUBLE PRECISION PV , PPV , DET C CALL MATINV3D ( C , CINV , NDI ) C DO I1 = 1 , NDI DO J1 = 1 , NDI DO K1 = 1 , NDI DO L1 = 1 , NDI CVOL ( I1 , J1 , K1 , L1 ) = 1 DET * PPV * CINV ( I1 , J1 ) * CINV ( K1 , L1 ) 2 - DET * PV * ( CINV ( I1 , K1 ) * CINV ( J1 , L1 ) 3 + CINV ( I1 , L1 ) * CINV ( J1 , K1 )) END DO END DO END DO END DO C RETURN END SUBROUTINE METVOL","tags":"","loc":"sourcefile/metvol.for.html"},{"title":"contraction42.for – Fortran Program","text":"Contents Subroutines CONTRACTION42 Source Code contraction42.for Source Code SUBROUTINE CONTRACTION42 ( S , LT , RT , NDI ) C>       DOUBLE CONTRACTION BETWEEN 4TH ORDER AND 2ND ORDER  TENSOR C>      INPUT: C>       LT - RIGHT 4TH ORDER TENSOR C>       RT - LEFT  2ND ODER TENSOR C>      OUTPUT: C>       S - DOUBLE CONTRACTED TENSOR (2ND ORDER) IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER I1 , J1 , K1 , L1 , NDI C DOUBLE PRECISION RT ( NDI , NDI ), LT ( NDI , NDI , NDI , NDI ) DOUBLE PRECISION S ( NDI , NDI ) DOUBLE PRECISION AUX C DO I1 = 1 , NDI DO J1 = 1 , NDI AUX = ZERO DO K1 = 1 , NDI DO L1 = 1 , NDI AUX = AUX + LT ( I1 , J1 , K1 , L1 ) * RT ( K1 , L1 ) END DO END DO S ( I1 , J1 ) = AUX END DO END DO RETURN END SUBROUTINE CONTRACTION42","tags":"","loc":"sourcefile/contraction42.for.html"},{"title":"proj_eulerian.for – Fortran Program","text":"Contents Subroutines PROJEUL Source Code proj_eulerian.for Source Code SUBROUTINE PROJEUL ( A , AA , PE , NDI ) C>    EULERIAN PROJECTION TENSOR C      INPUTS: C          IDENTITY TENSORS - A, AA C      OUTPUTS: C          4TH ORDER SYMMETRIC EULERIAN PROJECTION TENSOR - PE C IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER I , J , K , L , NDI C DOUBLE PRECISION A ( NDI , NDI ), AA ( NDI , NDI , NDI , NDI ), 1 PE ( NDI , NDI , NDI , NDI ) C DO I = 1 , NDI DO J = 1 , NDI DO K = 1 , NDI DO L = 1 , NDI PE ( I , J , K , L ) = AA ( I , J , K , L ) - ( ONE / THREE ) * ( A ( I , J ) * A ( K , L )) END DO END DO END DO END DO C RETURN END SUBROUTINE PROJEUL","tags":"","loc":"sourcefile/proj_eulerian.for.html"},{"title":"sigvol.for – Fortran Program","text":"Contents Subroutines SIGVOL Source Code sigvol.for Source Code SUBROUTINE SIGVOL ( SVOL , PV , UNIT2 , NDI ) C>    VOLUMETRIC CAUCHY STRESS IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI , I1 , J1 DOUBLE PRECISION UNIT2 ( NDI , NDI ), SVOL ( NDI , NDI ) DOUBLE PRECISION PV C DO I1 = 1 , NDI DO J1 = 1 , NDI SVOL ( I1 , J1 ) = PV * UNIT2 ( I1 , J1 ) END DO END DO C RETURN END SUBROUTINE SIGVOL","tags":"","loc":"sourcefile/sigvol.for.html"},{"title":"isomat.for – Fortran Program","text":"Contents Subroutines ISOMAT Source Code isomat.for Source Code SUBROUTINE ISOMAT ( SSEISO , DISO , C10 , C01 , CBARI1 , CBARI2 ) C>     ISOTROPIC MATRIX : ISOCHORIC SEF AND DERIVATIVES IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C DOUBLE PRECISION SSEISO , DISO ( 5 ) DOUBLE PRECISION C10 , C01 , CBARI1 , CBARI2 C SSEISO = C10 * ( CBARI1 - THREE ) + C01 * ( CBARI2 - THREE ) C !FIRST DERIVATIVE OF SSEISO IN ORDER TO I1 DISO ( 1 ) = C10 !FIRST DERIVATIVE OF SSEISO IN ORDER TO I2 DISO ( 2 ) = C01 !SECOND DERIVATIVE OF SSEISO IN ORDER TO I1 DISO ( 3 ) = ZERO !SECOND DERIVATIVE OF SSEISO IN ORDER TO I2 DISO ( 4 ) = ZERO !SECOND DERIVATIVE OF SSEISO IN ORDER TO I1 AND I2 DISO ( 5 ) = ZERO C RETURN END SUBROUTINE ISOMAT","tags":"","loc":"sourcefile/isomat.for.html"},{"title":"sdvread.for – Fortran Program","text":"Contents Subroutines SDVREAD Source Code sdvread.for Source Code SUBROUTINE SDVREAD ( STATEV , VV ) C>    VISCOUS DISSIPATION: READ STATE VARS IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER VV DOUBLE PRECISION STATEV ( NSDV ) C        read your sdvs here. they should be allocated C                after the viscous terms (check hvread) !        POS1=9*VV !        DO I1=1,NCH !         POS2=POS1+I1 !         FRAC(I1)=STATEV(POS2) !        ENDDO C C RETURN C END SUBROUTINE SDVREAD","tags":"","loc":"sourcefile/sdvread.for.html"},{"title":"anisomat.for – Fortran Program","text":"Contents Subroutines ANISOMAT Source Code anisomat.for Source Code SUBROUTINE ANISOMAT ( SSEANISO , DANISO , DISO , K1 , K2 , KDISP , I4 , I1 ) C>     ANISOTROPIC PART : ISOCHORIC SEF AND DERIVATIVES IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C DOUBLE PRECISION SSEISO , DANISO ( 4 ), DISO ( 5 ) DOUBLE PRECISION K1 , K2 , KDISP , I4 , I1 DOUBLE PRECISION DUDI1 , D2UD2I1 , SSEANISO DOUBLE PRECISION E1 , EE2 , EE3 , DUDI4 , D2UD2I4 , D2DUDI1DI4 , D2DUDI2DI4 C DUDI1 = DISO ( 1 ) D2UD2I1 = DISO ( 3 ) C E1 = I4 * ( ONE - THREE * KDISP ) + I1 * KDISP - ONE C SSEANISO = ( K1 / K2 ) * ( DEXP ( K1 * E1 * E1 ) - ONE ) IF ( E1 . GT . ZERO ) THEN C EE2 = DEXP ( K2 * E1 * E1 ) EE3 = ( ONE + TWO * K2 * E1 * E1 ) C DUDI1 = DUDI1 + K1 * KDISP * E1 * EE2 D2UD2I1 = D2UD2I1 + K1 * KDISP * KDISP * EE3 * EE2 C DUDI4 = K1 * ( ONE - THREE * KDISP ) * E1 * EE2 C D2UD2I4 = K1 * (( ONE - THREE * KDISP ) ** TWO ) * EE3 * EE2 D2DUDI1DI4 = K1 * ( ONE - THREE * KDISP ) * KDISP * EE3 * EE2 D2DUDI2DI4 = ZERO C ELSE DUDI4 = ZERO D2UD2I4 = ZERO D2DUDI1DI4 = ZERO D2DUDI2DI4 = ZERO D2UD2I1 = ZERO C END IF !FIRST DERIVATIVE OF SSEANISO IN ORDER TO I1 DANISO ( 1 ) = DUDI4 !FIRST DERIVATIVE OF SSEANISO IN ORDER TO I2 DANISO ( 2 ) = D2UD2I4 !2ND DERIVATIVE OF SSEANISO IN ORDER TO I1 DANISO ( 3 ) = D2DUDI1DI4 !2ND DERIVATIVE OF SSEANISO IN ORDER TO I2 DANISO ( 4 ) = D2DUDI2DI4 C DISO ( 1 ) = DUDI1 DISO ( 3 ) = D2UD2I1 C RETURN END SUBROUTINE ANISOMAT","tags":"","loc":"sourcefile/anisomat.for.html"},{"title":"pk2vol.for – Fortran Program","text":"Contents Subroutines PK2VOL Source Code pk2vol.for Source Code SUBROUTINE PK2VOL ( PKVOL , PV , C , NDI ) C>    VOLUMETRIC PK2 STRESS IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI , I1 , J1 DOUBLE PRECISION PKVOL ( NDI , NDI ), C ( NDI , NDI ), CINV ( NDI , NDI ) DOUBLE PRECISION PV C CALL MATINV3D ( C , CINV , NDI ) C DO I1 = 1 , NDI DO J1 = 1 , NDI PKVOL ( I1 , J1 ) = PV * CINV ( I1 , J1 ) END DO END DO C RETURN END SUBROUTINE PK2VOL","tags":"","loc":"sourcefile/pk2vol.for.html"},{"title":"pull4.for – Fortran Program","text":"Contents Subroutines PULL4 Source Code pull4.for Source Code SUBROUTINE PULL4 ( MAT , SPATIAL , FINV , DET , NDI ) C>        PULL-BACK TIMES DET OF 4TH ORDER TENSOR IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER I1 , J1 , K1 , L1 , II1 , JJ1 , KK1 , LL1 , NDI DOUBLE PRECISION MAT ( NDI , NDI , NDI , NDI ), FINV ( NDI , NDI ) DOUBLE PRECISION SPATIAL ( NDI , NDI , NDI , NDI ) DOUBLE PRECISION AUX , DET C DO I1 = 1 , NDI DO J1 = 1 , NDI DO K1 = 1 , NDI DO L1 = 1 , NDI AUX = ZERO DO II1 = 1 , NDI DO JJ1 = 1 , NDI DO KK1 = 1 , NDI DO LL1 = 1 , NDI AUX = AUX + DET * + FINV ( I1 , II1 ) * FINV ( J1 , JJ1 ) * + FINV ( K1 , KK1 ) * FINV ( L1 , LL1 ) * SPATIAL ( II1 , JJ1 , KK1 , LL1 ) END DO END DO END DO END DO MAT ( I1 , J1 , K1 , L1 ) = AUX END DO END DO END DO END DO C RETURN END SUBROUTINE PULL4","tags":"","loc":"sourcefile/pull4.for.html"},{"title":"deffil.for – Fortran Program","text":"Contents Subroutines DEFFIL Source Code deffil.for Source Code SUBROUTINE DEFFIL ( LAMBDA , M , M0 , F , NDI ) C>      SINGLE FILAMENT: STRETCH AND DEFORMED DIRECTION IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI , I1 , J1 DOUBLE PRECISION F ( NDI , NDI ), M ( NDI ), M0 ( NDI ) DOUBLE PRECISION AUX , LAMBDA C LAMBDA = ZERO DO I1 = 1 , NDI AUX = ZERO DO J1 = 1 , NDI AUX = AUX + F ( I1 , J1 ) * M0 ( J1 ) END DO M ( I1 ) = AUX END DO LAMBDA = DOT_PRODUCT ( M , M ) LAMBDA = SQRT ( LAMBDA ) C RETURN END SUBROUTINE DEFFIL","tags":"","loc":"sourcefile/deffil.for.html"},{"title":"setjr.for – Fortran Program","text":"Contents Subroutines SETJR Source Code setjr.for Source Code SUBROUTINE SETJR ( CJR , SIGMA , UNIT2 , NDI ) C>    JAUMAN RATE CONTRIBUTION FOR THE SPATIAL ELASTICITY TENSOR IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI , I1 , J1 , K1 , L1 DOUBLE PRECISION UNIT2 ( NDI , NDI ), 1 CJR ( NDI , NDI , NDI , NDI ), SIGMA ( NDI , NDI ) C DO I1 = 1 , NDI DO J1 = 1 , NDI DO K1 = 1 , NDI DO L1 = 1 , NDI CJR ( I1 , J1 , K1 , L1 ) = 1 ( ONE / TWO ) * ( UNIT2 ( I1 , K1 ) * SIGMA ( J1 , L1 ) 2 + SIGMA ( I1 , K1 ) * UNIT2 ( J1 , L1 ) + UNIT2 ( I1 , L1 ) * SIGMA ( J1 , K1 ) 3 + SIGMA ( I1 , L1 ) * UNIT2 ( J1 , K1 )) END DO END DO END DO END DO C RETURN END SUBROUTINE SETJR","tags":"","loc":"sourcefile/setjr.for.html"},{"title":"_umat_.for – Fortran Program","text":"Contents Subroutines UMAT Source Code _umat_.for Source Code C>******************************************************************** C> Record of revisions:                                              | C>        Date        Programmer        Description of change        | C>        ====        ==========        =====================        | C>     15/11/2017    Joao Ferreira      cont mech general eqs        | C>     01/11/2018    Joao Ferreira      comments added               | C>-------------------------------------------------------------------- C>     Description: C>     UMAT: IMPLEMENTATION OF THE CONSTITUTIVE EQUATIONS BASED UPON C>     A STRAIN-ENERGY FUNCTION (SEF). C>     THIS CODE, AS IS, EXPECTS A SEF BASED ON THE INVARIANTS OF THE C>     CAUCHY-GREEN TENSORS. A VISCOELASTIC COMPONENT IS ALSO C>     INCLUDED IF NEEDED. C>     YOU CAN CHOOSE TO COMPUTE AT THE MATERIAL FRAME AND THEN C>     PUSHFORWARD OR  COPUTE AND THE SPATIAL FRAME DIRECTLY. C>-------------------------------------------------------------------- C>     IF YOU WANT TO ADAPT THE CODE ACCORDING TO YOUR SEF: C>    ISOMAT - DERIVATIVES OF THE SEF IN ORDER TO THE INVARIANTS C>    ADD OTHER CONTRIBUTIONS: STRESS AND TANGENT MATRIX C>-------------------------------------------------------------------- C      STATE VARIABLES: CHECK ROUTINES - INITIALIZE, WRITESDV, READSDV. C>-------------------------------------------------------------------- C>     UEXTERNALDB: READ FILAMENTS ORIENTATION AND PREFERED DIRECTION C>-------------------------------------------------------------------- C>--------------------------------------------------------------------- SUBROUTINE UMAT ( STRESS , STATEV , DDSDDE , SSE , SPD , SCD , 1 RPL , DDSDDT , DRPLDE , DRPLDT , 2 STRAN , DSTRAN , TIME , DTIME , TEMP , DTEMP , PREDEF , DPRED , CMNAME , 3 NDI , NSHR , NTENS , NSTATEV , PROPS , NPROPS , COORDS , DROT , PNEWDT , 4 CELENT , DFGRD0 , DFGRD1 , NOEL , NPT , LAYER , KSPT , KSTEP , KINC ) C C---------------------------------------------------------------------- C--------------------------- DECLARATIONS ----------------------------- C---------------------------------------------------------------------- IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C     ADD COMMON BLOCKS HERE IF NEEDED (and in uexternal) C      COMMON /KBLOCK/KBLOCK COMMON / KFIB / FIBORI C CHARACTER * 8 CMNAME C INTEGER NDI , NSHR , NTENS , NSTATEV , NPROPS , NOEL , NPT , 1 LAYER , KSPT , KSTEP , KINC C DOUBLE PRECISION STRESS ( NTENS ), STATEV ( NSTATEV ), 1 DDSDDE ( NTENS , NTENS ), DDSDDT ( NTENS ), DRPLDE ( NTENS ), 2 STRAN ( NTENS ), DSTRAN ( NTENS ), TIME ( 2 ), PREDEF ( 1 ), DPRED ( 1 ), 3 PROPS ( NPROPS ), COORDS ( 3 ), DROT ( 3 , 3 ), DFGRD0 ( 3 , 3 ), DFGRD1 ( 3 , 3 ), 4 FIBORI ( NELEM , 4 ) C DOUBLE PRECISION SSE , SPD , SCD , RPL , DRPLDT , DTIME , TEMP , 1 DTEMP , PNEWDT , CELENT C INTEGER NTERM C C     FLAGS C      INTEGER FLAG1 C     UTILITY TENSORS DOUBLE PRECISION UNIT2 ( NDI , NDI ), UNIT4 ( NDI , NDI , NDI , NDI ), 1 UNIT4S ( NDI , NDI , NDI , NDI ), 2 PROJE ( NDI , NDI , NDI , NDI ), PROJL ( NDI , NDI , NDI , NDI ) C     KINEMATICS DOUBLE PRECISION DISTGR ( NDI , NDI ), C ( NDI , NDI ), B ( NDI , NDI ), 1 CBAR ( NDI , NDI ), BBAR ( NDI , NDI ), DISTGRINV ( NDI , NDI ), 2 UBAR ( NDI , NDI ), VBAR ( NDI , NDI ), ROT ( NDI , NDI ), 3 DFGRD1INV ( NDI , NDI ) DOUBLE PRECISION DET , CBARI1 , CBARI2 C     VOLUMETRIC CONTRIBUTION DOUBLE PRECISION PKVOL ( NDI , NDI ), SVOL ( NDI , NDI ), 1 CVOL ( NDI , NDI , NDI , NDI ), CMVOL ( NDI , NDI , NDI , NDI ) DOUBLE PRECISION KBULK , PV , PPV , SSEV C     ISOCHORIC CONTRIBUTION DOUBLE PRECISION SISO ( NDI , NDI ), PKISO ( NDI , NDI ), PK2 ( NDI , NDI ), 1 CISO ( NDI , NDI , NDI , NDI ), CMISO ( NDI , NDI , NDI , NDI ), 2 SFIC ( NDI , NDI ), CFIC ( NDI , NDI , NDI , NDI ), 3 PKFIC ( NDI , NDI ), CMFIC ( NDI , NDI , NDI , NDI ) C     ISOCHORIC ISOTROPIC CONTRIBUTION DOUBLE PRECISION C10 , C01 , SSEISO , DISO ( 5 ), PKMATFIC ( NDI , NDI ), 1 SMATFIC ( NDI , NDI ), SISOMATFIC ( NDI , NDI ), 2 CMISOMATFIC ( NDI , NDI , NDI , NDI ), 3 CISOMATFIC ( NDI , NDI , NDI , NDI ) C     ISOCHORIC ANISOTROPIC CONTRIBUTION DOUBLE PRECISION K1 , K2 , KDISP , SSEANISO , 1 DANISO ( 4 ), 2 PKMATFICANISO ( NDI , NDI ), 3 SANISOMATFIC ( NDI , NDI ), 4 CMANISOMATFIC ( NDI , NDI , NDI , NDI ), 6 CANISOMATFIC ( NDI , NDI , NDI , NDI ), 8 LAMBDA , BARLAMBDA , 9 CBARI4 DOUBLE PRECISION VORIF ( 3 ), VD ( 3 ), M0 ( 3 , 3 ), MM ( 3 , 3 ), 1 VORIF2 ( 3 ), VD2 ( 3 ), N0 ( 3 , 3 ), NN ( 3 , 3 ) C     LIST VARS OF OTHER CONTRIBUTIONS HERE C C     VISCOUS PROPERTIES (GENERALIZED MAXWEL DASHPOTS) DOUBLE PRECISION VSCPROPS ( 6 ) INTEGER VV C     JAUMMAN RATE CONTRIBUTION (REQUIRED FOR ABAQUS UMAT) DOUBLE PRECISION CJR ( NDI , NDI , NDI , NDI ) C     CAUCHY STRESS AND ELASTICITY TENSOR DOUBLE PRECISION SIGMA ( NDI , NDI ), DDSIGDDE ( NDI , NDI , NDI , NDI ), 1 DDPKDDE ( NDI , NDI , NDI , NDI ) C     TESTING/DEBUG VARS DOUBLE PRECISION STEST ( NDI , NDI ), CTEST ( NDI , NDI , NDI , NDI ) C---------------------------------------------------------------------- C-------------------------- INITIALIZATIONS --------------------------- C---------------------------------------------------------------------- C     IDENTITY AND PROJECTION TENSORS UNIT2 = ZERO UNIT4 = ZERO UNIT4S = ZERO PROJE = ZERO PROJL = ZERO C     KINEMATICS DISTGR = ZERO C = ZERO B = ZERO CBAR = ZERO BBAR = ZERO UBAR = ZERO VBAR = ZERO ROT = ZERO DET = ZERO CBARI1 = ZERO CBARI2 = ZERO C     VOLUMETRIC PKVOL = ZERO SVOL = ZERO CVOL = ZERO KBULK = ZERO PV = ZERO PPV = ZERO SSEV = ZERO C     ISOCHORIC SISO = ZERO PKISO = ZERO PK2 = ZERO CISO = ZERO CFIC = ZERO SFIC = ZERO PKFIC = ZERO C     ISOTROPIC C10 = ZERO C01 = ZERO SSEISO = ZERO DISO = ZERO PKMATFIC = ZERO SMATFIC = ZERO SISOMATFIC = ZERO CMISOMATFIC = ZERO CISOMATFIC = ZERO C     INITIALIZE OTHER CONT HERE C C     JAUMANN RATE CJR = ZERO C     TOTAL CAUCHY STRESS AND ELASTICITY TENSORS SIGMA = ZERO DDSIGDDE = ZERO C C---------------------------------------------------------------------- C------------------------ IDENTITY TENSORS ---------------------------- C---------------------------------------------------------------------- CALL ONEM ( UNIT2 , UNIT4 , UNIT4S , NDI ) C---------------------------------------------------------------------- C------------------- MATERIAL CONSTANTS AND DATA ---------------------- C---------------------------------------------------------------------- C     VOLUMETRIC KBULK = PROPS ( 1 ) C     ISOCHORIC ISOTROPIC NEO HOOKE C10 = PROPS ( 2 ) C01 = PROPS ( 3 ) C     ISOCHORIC ANISOTROPIC GHO K1 = PROPS ( 4 ) K2 = PROPS ( 5 ) KDISP = PROPS ( 6 ) C     VISCOUS EFFECTS: MAXWELL ELEMTS (MAX:3) VV = INT ( PROPS ( 7 )) VSCPROPS = PROPS ( 8 : 13 ) C     NUMERICAL COMPUTATIONS NTERM = 60 C C     STATE VARIABLES C IF (( TIME ( 1 ). EQ . ZERO ). AND .( KSTEP . EQ . 1 )) THEN CALL INITIALIZE ( STATEV , VV ) ENDIF C        READ STATEV CALL SDVREAD ( STATEV , VV ) C C---------------------------------------------------------------------- C---------------------------- KINEMATICS ------------------------------ C---------------------------------------------------------------------- C     DISTORTION GRADIENT CALL FSLIP ( DFGRD1 , DISTGR , DET , NDI ) C     INVERSE OF DISTORTION GRADIENT CALL MATINV3D ( DFGRD1 , DFGRD1INV , NDI ) C     INVERSE OF DISTORTION GRADIENT CALL MATINV3D ( DISTGR , DISTGRINV , NDI ) C     CAUCHY-GREEN DEFORMATION TENSORS CALL DEFORMATION ( DFGRD1 , C , B , NDI ) CALL DEFORMATION ( DISTGR , CBAR , BBAR , NDI ) C     FIBER UNIT VECTOR AND STRUCTURAL TENSOR CALL FIBDIR ( FIBORI , M0 , MM , NELEM , NOEL , NDI , VORIF , VD , DISTGR , DFGRD1 ) C     INVARIANTS OF DEVIATORIC DEFORMATION TENSORS CALL INVARIANTS ( CBAR , CBARI1 , CBARI2 , NDI ) C CALL PINVARIANTS ( CBAR , CBARI4 , NDI , M0 , LAMBDA , BARLAMBDA , DET ) C C     STRETCH TENSORS CALL STRETCH ( CBAR , BBAR , UBAR , VBAR , NDI ) C     ROTATION TENSORS CALL ROTATION ( DISTGR , ROT , UBAR , NDI ) C     DEVIATORIC PROJECTION TENSORS CALL PROJEUL ( UNIT2 , UNIT4S , PROJE , NDI ) C CALL PROJLAG ( C , UNIT4 , PROJL , NDI ) C---------------------------------------------------------------------- C--------------------- CONSTITUTIVE RELATIONS  ------------------------ C---------------------------------------------------------------------- C C---- VOLUMETRIC ------------------------------------------------------ C     STRAIN-ENERGY AND DERIVATIVES (CHANGE HERE ACCORDING TO YOUR MODEL) CALL VOL ( SSEV , PV , PPV , KBULK , DET ) CALL ISOMAT ( SSEISO , DISO , C10 , C01 , CBARI1 , CBARI2 ) CALL ANISOMAT ( SSEANISO , DANISO , DISO , K1 , K2 , KDISP , CBARI4 , CBARI1 ) C C---- ISOCHORIC ISOTROPIC --------------------------------------------- C     PK2 'FICTICIOUS' STRESS TENSOR CALL PK2ISOMATFIC ( PKMATFIC , DISO , CBAR , CBARI1 , UNIT2 , NDI ) C     CAUCHY 'FICTICIOUS' STRESS TENSOR CALL SIGISOMATFIC ( SISOMATFIC , PKMATFIC , DISTGR , DET , NDI ) C     'FICTICIOUS' MATERIAL ELASTICITY TENSOR CALL CMATISOMATFIC ( CMISOMATFIC , CBAR , CBARI1 , CBARI2 , 1 DISO , UNIT2 , UNIT4 , DET , NDI ) C     'FICTICIOUS' SPATIAL ELASTICITY TENSOR CALL CSISOMATFIC ( CISOMATFIC , CMISOMATFIC , DISTGR , DET , NDI ) C C---- OTHER CONTRIBUTIONS HERE  ---------------------------------------- C CALL PK2ANISOMATFIC ( PKMATFICANISO , DANISO , CBAR , CBARI4 , M0 , NDI ) CALL PUSH2 ( SANISOMATFIC , PKMATFICANISO , DISTGR , DET , NDI ) C CALL CMATANISOMATFIC ( CMANISOMATFIC , M0 , DANISO , UNIT2 , DET , NDI ) CALL PUSH4 ( CANISOMATFIC , CMANISOMATFIC , DISTGR , DET , NDI ) C---------------------------------------------------------------------- C     SUM OF ALL ELASTIC CONTRIBUTIONS C---------------------------------------------------------------------- C     STRAIN-ENERGY SSE = SSEV + SSEISO + SSEANISO C     PK2 'FICTICIOUS' STRESS PKFIC = PKMATFIC + PKMATFICANISO C     CAUCHY 'FICTICIOUS' STRESS SFIC = SISOMATFIC + SANISOMATFIC C     MATERIAL 'FICTICIOUS' ELASTICITY TENSOR CMFIC = CMISOMATFIC + CMANISOMATFIC C     SPATIAL 'FICTICIOUS' ELASTICITY TENSOR CFIC = CISOMATFIC + CANISOMATFIC C C---------------------------------------------------------------------- C-------------------------- STRESS MEASURES --------------------------- C---------------------------------------------------------------------- C C---- VOLUMETRIC ------------------------------------------------------ C      PK2 STRESS CALL PK2VOL ( PKVOL , PV , C , NDI ) C      CAUCHY STRESS CALL SIGVOL ( SVOL , PV , UNIT2 , NDI ) C C---- ISOCHORIC ------------------------------------------------------- C      PK2 STRESS CALL PK2ISO ( PKISO , PKFIC , PROJL , DET , NDI ) C      CAUCHY STRESS CALL SIGISO ( SISO , SFIC , PROJE , NDI ) C      ACTIVE CAUCHY STRESS C      CALL SIGISO(SACTISO,SNETFICAF,PROJE,NDI) C C      CALL SPECTRAL(SACTISO,SACTVL,SACTVC) C C---- VOLUMETRIC + ISOCHORIC ------------------------------------------ C      PK2 STRESS PK2 = PKVOL + PKISO C      CAUCHY STRESS SIGMA = SVOL + SISO C C---------------------------------------------------------------------- C-------------------- MATERIAL ELASTICITY TENSOR ---------------------- C---------------------------------------------------------------------- C C---- VOLUMETRIC ------------------------------------------------------ C CALL METVOL ( CMVOL , C , PV , PPV , DET , NDI ) C C---- ISOCHORIC ------------------------------------------------------- C CALL METISO ( CMISO , CMFIC , PROJL , PKISO , PKFIC , C , UNIT2 , DET , NDI ) C C---------------------------------------------------------------------- C DDPKDDE = CMVOL + CMISO C C---------------------------------------------------------------------- C--------------------- SPATIAL ELASTICITY TENSOR ---------------------- C---------------------------------------------------------------------- C C---- VOLUMETRIC ------------------------------------------------------ C CALL SETVOL ( CVOL , PV , PPV , UNIT2 , UNIT4S , NDI ) C C---- ISOCHORIC ------------------------------------------------------- C CALL SETISO ( CISO , CFIC , PROJE , SISO , SFIC , UNIT2 , NDI ) C C-----JAUMMAN RATE ---------------------------------------------------- C CALL SETJR ( CJR , SIGMA , UNIT2 , NDI ) C C---------------------------------------------------------------------- C C     ELASTICITY TENSOR DDSIGDDE = CVOL + CISO + CJR C C---------------------------------------------------------------------- C-------------------------- VISCOUS PART ------------------------------ C---------------------------------------------------------------------- C      PULLBACK OF STRESS AND ELASTICITY TENSORS C      CALL PULL2(PKVOL,SVOL,DFGRD1INV,DET,NDI) C      CALL PULL2(PKISO,SISO,DFGRD1INV,DET,NDI) C      CALL PULL4(CMVOL,CVOL,DFGRD1INV,DET,NDI) C      CALL PULL4(CMISO,CISO,DFGRD1INV,DET,NDI) C      VISCOUS DAMPING CALL VISCO ( PK2 , DDPKDDE , VV , PKVOL , PKISO , CMVOL , CMISO , DTIME , 1 VSCPROPS , STATEV , NDI ) C C      PUSH FORWARD OF STRESS AND ELASTICITY TENSOR CALL PUSH2 ( SIGMA , PK2 , DFGRD1 , DET , NDI ) C CALL PUSH4 ( DDSIGDDE , DDPKDDE , DFGRD1 , DET , NDI ) DDSIGDDE = DDSIGDDE + CJR C C C---------------------------------------------------------------------- C------------------------- INDEX ALLOCATION --------------------------- C---------------------------------------------------------------------- C     VOIGT NOTATION  - FULLY SIMMETRY IMPOSED CALL INDEXX ( STRESS , DDSDDE , SIGMA , DDSIGDDE , NTENS , NDI ) C C---------------------------------------------------------------------- C--------------------------- STATE VARIABLES -------------------------- C---------------------------------------------------------------------- C     DO K1 = 1, NTENS C      STATEV(1:27) = VISCOUS TENSORS CALL SDVWRITE ( DET , STATEV , VV ) C     END DO C---------------------------------------------------------------------- RETURN END C---------------------------------------------------------------------- C--------------------------- END OF UMAT ------------------------------ C---------------------------------------------------------------------- C","tags":"","loc":"sourcefile/_umat_.for.html"},{"title":"contraction44.for – Fortran Program","text":"Contents Subroutines CONTRACTION44 Source Code contraction44.for Source Code SUBROUTINE CONTRACTION44 ( S , LT , RT , NDI ) C>       DOUBLE CONTRACTION BETWEEN 4TH ORDER TENSORS C>      INPUT: C>       LT - RIGHT 4TH ORDER TENSOR C>       RT - LEFT  4TH ORDER TENSOR C>      OUTPUT: C>       S - DOUBLE CONTRACTED TENSOR (4TH ORDER) IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER I1 , J1 , K1 , L1 , M1 , N1 , NDI C DOUBLE PRECISION LT ( NDI , NDI , NDI , NDI ), RT ( NDI , NDI , NDI , NDI ) DOUBLE PRECISION S ( NDI , NDI , NDI , NDI ) DOUBLE PRECISION AUX C DO I1 = 1 , NDI DO J1 = 1 , NDI DO K1 = 1 , NDI DO L1 = 1 , NDI AUX = ZERO DO M1 = 1 , NDI DO N1 = 1 , NDI AUX = AUX + LT ( I1 , J1 , M1 , N1 ) * RT ( M1 , N1 , K1 , L1 ) END DO END DO S ( I1 , J1 , K1 , L1 ) = AUX END DO END DO END DO END DO C RETURN END SUBROUTINE CONTRACTION44","tags":"","loc":"sourcefile/contraction44.for.html"},{"title":"initialize.for – Fortran Program","text":"Contents Subroutines INITIALIZE Source Code initialize.for Source Code SUBROUTINE INITIALIZE ( STATEV , VV ) C IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C C      COMMON /KCOMMON/KBLOCK C C      DOUBLE PRECISION TIME(2),KSTEP INTEGER I1 , POS , POS1 , POS2 , POS3 , VV DOUBLE PRECISION STATEV ( NSDV ) C        VISCOUS TENSORS DO I1 = 1 , VV POS = 9 * I1 - 9 STATEV ( 1 + POS ) = ZERO STATEV ( 2 + POS ) = ZERO STATEV ( 3 + POS ) = ZERO STATEV ( 4 + POS ) = ZERO STATEV ( 5 + POS ) = ZERO STATEV ( 6 + POS ) = ZERO STATEV ( 7 + POS ) = ZERO STATEV ( 8 + POS ) = ZERO STATEV ( 9 + POS ) = ZERO ENDDO STATEV ( POS + 10 ) = ONE C RETURN C END SUBROUTINE INITIALIZE","tags":"","loc":"sourcefile/initialize.for.html"},{"title":"setvol.for – Fortran Program","text":"Contents Subroutines SETVOL Source Code setvol.for Source Code SUBROUTINE SETVOL ( CVOL , PV , PPV , UNIT2 , UNIT4S , NDI ) C>    VOLUMETRIC SPATIAL ELASTICITY TENSOR IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI , I1 , J1 , K1 , L1 DOUBLE PRECISION UNIT2 ( NDI , NDI ), UNIT4S ( NDI , NDI , NDI , NDI ), 1 CVOL ( NDI , NDI , NDI , NDI ) DOUBLE PRECISION PV , PPV C DO I1 = 1 , NDI DO J1 = 1 , NDI DO K1 = 1 , NDI DO L1 = 1 , NDI CVOL ( I1 , J1 , K1 , L1 ) = 1 PPV * UNIT2 ( I1 , J1 ) * UNIT2 ( K1 , L1 ) 2 - TWO * PV * UNIT4S ( I1 , J1 , K1 , L1 ) END DO END DO END DO END DO C RETURN END SUBROUTINE SETVOL","tags":"","loc":"sourcefile/setvol.for.html"},{"title":"hvwrite.for – Fortran Program","text":"Contents Subroutines HVWRITE Source Code hvwrite.for Source Code SUBROUTINE HVWRITE ( STATEV , HV , V1 , NDI ) C>    VISCOUS DISSIPATION: WRITE STATE VARS IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI , V1 , POS DOUBLE PRECISION HV ( NDI , NDI ), STATEV ( NSDV ) C POS = 9 * V1 - 9 STATEV ( 1 + POS ) = HV ( 1 , 1 ) STATEV ( 2 + POS ) = HV ( 1 , 2 ) STATEV ( 3 + POS ) = HV ( 1 , 3 ) STATEV ( 4 + POS ) = HV ( 2 , 1 ) STATEV ( 5 + POS ) = HV ( 2 , 2 ) STATEV ( 6 + POS ) = HV ( 2 , 3 ) STATEV ( 7 + POS ) = HV ( 3 , 1 ) STATEV ( 8 + POS ) = HV ( 3 , 2 ) STATEV ( 9 + POS ) = HV ( 3 , 3 ) C RETURN C END SUBROUTINE HVWRITE","tags":"","loc":"sourcefile/hvwrite.for.html"},{"title":"pk2isomatfic.for – Fortran Program","text":"Contents Subroutines PK2ISOMATFIC Source Code pk2isomatfic.for Source Code SUBROUTINE PK2ISOMATFIC ( FIC , DISO , CBAR , CBARI1 , UNIT2 , NDI ) C>     ISOTROPIC MATRIX: 2PK 'FICTICIOUS' STRESS TENSOR C      INPUT: C       DISO - STRAIN-ENERGY DERIVATIVES C       CBAR - DEVIATORIC LEFT CAUCHY-GREEN TENSOR C       CBARI1,CBARI2 - CBAR INVARIANTS C       UNIT2 - 2ND ORDER IDENTITY TENSOR C      OUTPUT: C       FIC - 2ND PIOLA KIRCHOOF 'FICTICIOUS' STRESS TENSOR IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER I1 , J1 , NDI DOUBLE PRECISION FIC ( NDI , NDI ), DISO ( 5 ), CBAR ( NDI , NDI ), UNIT2 ( NDI , NDI ) DOUBLE PRECISION DUDI1 , DUDI2 , CBARI1 DOUBLE PRECISION AUX1 , AUX2 C DUDI1 = DISO ( 1 ) DUDI2 = DISO ( 2 ) C AUX1 = TWO * ( DUDI1 + CBARI1 * DUDI2 ) AUX2 =- TWO * DUDI2 C DO I1 = 1 , NDI DO J1 = 1 , NDI FIC ( I1 , J1 ) = AUX1 * UNIT2 ( I1 , J1 ) + AUX2 * CBAR ( I1 , J1 ) END DO END DO C RETURN END SUBROUTINE PK2ISOMATFIC","tags":"","loc":"sourcefile/pk2isomatfic.for.html"},{"title":"uexternaldb.for – Fortran Program","text":"Contents Subroutines UEXTERNALDB Source Code uexternaldb.for Source Code SUBROUTINE UEXTERNALDB ( LOP , LRESTART , TIME , DTIME , KSTEP , KINC ) C>    READ MESH DATA INCLUDE 'ABA_PARAM.INC' INCLUDE 'PARAM_UMAT.INC' C C     UEXTERNAL just called once; work in parallel computing C     ADD COMMON BLOCKS HERE IF NEEDED (and in UMAT) C      COMMON /KBLOCK/KBLOCK COMMON / KFIB / FIBORI C REAL * 8 DTIME DIMENSION TIME ( 2 ) CHARACTER ( 256 ) FILENAME CHARACTER ( 256 ) JOBDIR INTEGER LENJOBDIR REAL * 8 FIBORI ( NELEM , 4 ) C     LOP=0 --> START OF THE ANALYSIS IF ( LOP . EQ . 0. OR . LOP . EQ . 4 ) THEN C CALL GETOUTDIR ( JOBDIR , LENJOBDIR ) C        DIR1 DEFNIED IN PARAM_UMAT.INC FILENAME = JOBDIR (: LENJOBDIR ) // '/' // DIR1 C OPEN ( 15 , FILE = FILENAME ) DO I = 1 , NELEM READ ( 15 , * ) ( FIBORI ( I , J ), J = 1 , 4 ) END DO CLOSE ( 15 ) !C END IF C RETURN C END SUBROUTINE UEXTERNALDB","tags":"","loc":"sourcefile/uexternaldb.for.html"},{"title":"GETOUTDIR.for – Fortran Program","text":"Contents Subroutines GETOUTDIR Source Code GETOUTDIR.for Source Code SUBROUTINE GETOUTDIR ( OUTDIR , LENOUTDIR ) C>     GET CURRENT WORKING DIRECTORY INCLUDE 'aba_param.inc' C CHARACTER * 256 OUTDIR INTEGER LENOUTDIR C CALL GETCWD ( OUTDIR ) c        OUTDIR=OUTDIR(1:SCAN(OUTDIR,'\\',BACK=.TRUE.)-1) LENOUTDIR = LEN_TRIM ( OUTDIR ) C RETURN END SUBROUTINE GETOUTDIR","tags":"","loc":"sourcefile/getoutdir.for.html"},{"title":"sigisomatfic.for – Fortran Program","text":"Contents Subroutines SIGISOMATFIC Source Code sigisomatfic.for Source Code SUBROUTINE SIGISOMATFIC ( SFIC , PKFIC , F , DET , NDI ) C>    ISOTROPIC MATRIX:  ISOCHORIC CAUCHY STRESS IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI DOUBLE PRECISION SFIC ( NDI , NDI ), F ( NDI , NDI ), 1 PKFIC ( NDI , NDI ) DOUBLE PRECISION DET C CALL PUSH2 ( SFIC , PKFIC , F , DET , NDI ) C RETURN END SUBROUTINE SIGISOMATFIC","tags":"","loc":"sourcefile/sigisomatfic.for.html"},{"title":"pk2anisomatfic.for – Fortran Program","text":"Contents Subroutines PK2ANISOMATFIC Source Code pk2anisomatfic.for Source Code SUBROUTINE PK2ANISOMATFIC ( AFIC , DANISO , CBAR , INV4 , ST0 , NDI ) C>      ANISOTROPIC MATRIX: 2PK 'FICTICIOUS' STRESS TENSOR C       INPUT: C       DANISO - ANISOTROPIC STRAIN-ENERGY DERIVATIVES C       CBAR - DEVIATORIC LEFT CAUCHY-GREEN TENSOR C       INV1,INV4 -CBAR INVARIANTS C       UNIT2 - 2ND ORDER IDENTITY TENSOR C       OUTPUT: C       AFIC - 2ND PIOLA KIRCHOOF 'FICTICIOUS' STRESS TENSOR IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI DOUBLE PRECISION AFIC ( NDI , NDI ), DANISO ( 3 ), CBAR ( 3 , 3 ) DOUBLE PRECISION DUDI4 , DI4DC ( 3 , 3 ), INV4 DOUBLE PRECISION ST0 ( 3 , 3 ) C C C----------------------------------------------------------------------------- !FIRST DERIVATIVE OF SSEANISO IN ORDER TO I4 DUDI4 = DANISO ( 1 ) C DI4DC = ST0 C AFIC = TWO * ( DUDI4 * DI4DC ) C RETURN END SUBROUTINE PK2ANISOMATFIC","tags":"","loc":"sourcefile/pk2anisomatfic.for.html"},{"title":"stretch.for – Fortran Program","text":"Contents Subroutines STRETCH Source Code stretch.for Source Code SUBROUTINE STRETCH ( C , B , U , V , NDI ) C>    STRETCH TENSORS IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI DOUBLE PRECISION C ( NDI , NDI ), B ( NDI , NDI ), U ( NDI , NDI ), V ( NDI , NDI ) DOUBLE PRECISION EIGVAL ( NDI ), OMEGA ( NDI ), EIGVEC ( NDI , NDI ) C CALL SPECTRAL ( C , OMEGA , EIGVEC ) C EIGVAL ( 1 ) = DSQRT ( OMEGA ( 1 )) EIGVAL ( 2 ) = DSQRT ( OMEGA ( 2 )) EIGVAL ( 3 ) = DSQRT ( OMEGA ( 3 )) C U ( 1 , 1 ) = EIGVAL ( 1 ) U ( 2 , 2 ) = EIGVAL ( 2 ) U ( 3 , 3 ) = EIGVAL ( 3 ) C U = MATMUL ( MATMUL ( EIGVEC , U ), TRANSPOSE ( EIGVEC )) C CALL SPECTRAL ( B , OMEGA , EIGVEC ) C EIGVAL ( 1 ) = DSQRT ( OMEGA ( 1 )) EIGVAL ( 2 ) = DSQRT ( OMEGA ( 2 )) EIGVAL ( 3 ) = DSQRT ( OMEGA ( 3 )) C      write(*,*) eigvec(1,1),eigvec(2,1),eigvec(3,1) C V ( 1 , 1 ) = EIGVAL ( 1 ) V ( 2 , 2 ) = EIGVAL ( 2 ) V ( 3 , 3 ) = EIGVAL ( 3 ) C V = MATMUL ( MATMUL ( EIGVEC , V ), TRANSPOSE ( EIGVEC )) RETURN END SUBROUTINE STRETCH","tags":"","loc":"sourcefile/stretch.for.html"},{"title":"minverse3d.for – Fortran Program","text":"Contents Subroutines MATINV3D Source Code minverse3d.for Source Code SUBROUTINE MATINV3D ( A , A_INV , NDI ) C>    INVERSE OF A 3X3 MATRIX C     RETURN THE INVERSE OF A(3,3) - A_INV IMPLICIT NONE C INTEGER NDI C DOUBLE PRECISION A ( NDI , NDI ), A_INV ( NDI , NDI ), DET_A , DET_A_INV C DET_A = A ( 1 , 1 ) * ( A ( 2 , 2 ) * A ( 3 , 3 ) - A ( 3 , 2 ) * A ( 2 , 3 )) - + A ( 2 , 1 ) * ( A ( 1 , 2 ) * A ( 3 , 3 ) - A ( 3 , 2 ) * A ( 1 , 3 )) + + A ( 3 , 1 ) * ( A ( 1 , 2 ) * A ( 2 , 3 ) - A ( 2 , 2 ) * A ( 1 , 3 )) IF ( DET_A . LE . 0.D0 ) THEN WRITE ( * , * ) 'WARNING: SUBROUTINE MATINV3D:' WRITE ( * , * ) 'WARNING: DET OF MAT=' , DET_A RETURN END IF C DET_A_INV = 1.D0 / DET_A C A_INV ( 1 , 1 ) = DET_A_INV * ( A ( 2 , 2 ) * A ( 3 , 3 ) - A ( 3 , 2 ) * A ( 2 , 3 )) A_INV ( 1 , 2 ) = DET_A_INV * ( A ( 3 , 2 ) * A ( 1 , 3 ) - A ( 1 , 2 ) * A ( 3 , 3 )) A_INV ( 1 , 3 ) = DET_A_INV * ( A ( 1 , 2 ) * A ( 2 , 3 ) - A ( 2 , 2 ) * A ( 1 , 3 )) A_INV ( 2 , 1 ) = DET_A_INV * ( A ( 3 , 1 ) * A ( 2 , 3 ) - A ( 2 , 1 ) * A ( 3 , 3 )) A_INV ( 2 , 2 ) = DET_A_INV * ( A ( 1 , 1 ) * A ( 3 , 3 ) - A ( 3 , 1 ) * A ( 1 , 3 )) A_INV ( 2 , 3 ) = DET_A_INV * ( A ( 2 , 1 ) * A ( 1 , 3 ) - A ( 1 , 1 ) * A ( 2 , 3 )) A_INV ( 3 , 1 ) = DET_A_INV * ( A ( 2 , 1 ) * A ( 3 , 2 ) - A ( 3 , 1 ) * A ( 2 , 2 )) A_INV ( 3 , 2 ) = DET_A_INV * ( A ( 3 , 1 ) * A ( 1 , 2 ) - A ( 1 , 1 ) * A ( 3 , 2 )) A_INV ( 3 , 3 ) = DET_A_INV * ( A ( 1 , 1 ) * A ( 2 , 2 ) - A ( 2 , 1 ) * A ( 1 , 2 )) C RETURN END SUBROUTINE MATINV3D","tags":"","loc":"sourcefile/minverse3d.for.html"},{"title":"spectral.for – Fortran Program","text":"Contents Subroutines SPECTRAL JACOBI EIGSRT Source Code spectral.for Source Code SUBROUTINE SPECTRAL ( A , D , V ) C>    EIGENVALUES AND EIGENVECTOR OF A 3X3 MATRIX C     THIS SUBROUTINE CALCULATES THE EIGENVALUES AND EIGENVECTORS OF C     A SYMMETRIC 3X3 MATRIX A. C C     THE OUTPUT CONSISTS OF A VECTOR D CONTAINING THE THREE C     EIGENVALUES IN ASCENDING ORDER, AND A MATRIX V WHOSE C     COLUMNS CONTAIN THE CORRESPONDING EIGENVECTORS. C IMPLICIT NONE C INTEGER NP , NROT PARAMETER ( NP = 3 ) C DOUBLE PRECISION D ( 3 ), V ( 3 , 3 ), A ( 3 , 3 ), E ( 3 , 3 ) C E = A C CALL JACOBI ( E , 3 , NP , D , V , NROT ) CALL EIGSRT ( D , V , 3 , NP ) C RETURN END SUBROUTINE SPECTRAL C*********************************************************************** SUBROUTINE JACOBI ( A , N , NP , D , V , NROT ) C C COMPUTES ALL EIGENVALUES AND EIGENVECTORS OF A REAL SYMMETRIC C  MATRIX A, WHICH IS OF SIZE N BY N, STORED IN A PHYSICAL C  NP BY NP ARRAY.  ON OUTPUT, ELEMENTS OF A ABOVE THE DIAGONAL C  ARE DESTROYED, BUT THE DIAGONAL AND SUB-DIAGONAL ARE UNCHANGED C  AND GIVE FULL INFORMATION ABOUT THE ORIGINAL SYMMETRIC MATRIX. C  VECTOR D RETURNS THE EIGENVALUES OF A IN ITS FIRST N ELEMENTS. C  V IS A MATRIX WITH THE SAME LOGICAL AND PHYSICAL DIMENSIONS AS C  A WHOSE COLUMNS CONTAIN, UPON OUTPUT, THE NORMALIZED C  EIGENVECTORS OF A.  NROT RETURNS THE NUMBER OF JACOBI ROTATION C  WHICH WERE REQUIRED. C C THIS SUBROUTINE IS TAKEN FROM 'NUMERICAL RECIPES.' C IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER IP , IQ , N , NMAX , NP , NROT , I , J PARAMETER ( NMAX = 100 ) C DOUBLE PRECISION A ( NP , NP ), D ( NP ), V ( NP , NP ), B ( NMAX ), Z ( NMAX ), + SM , TRESH , G , T , H , THETA , S , C , TAU C INITIALIZE V TO THE IDENTITY MATRIX DO I = 1 , 3 V ( I , I ) = ONE DO J = 1 , 3 IF ( I . NE . J ) THEN V ( I , J ) = ZERO ENDIF END DO END DO C INITIALIZE B AND D TO THE DIAGONAL OF A, AND Z TO ZERO. C  THE VECTOR Z WILL ACCUMULATE TERMS OF THE FORM T*A_PQ AS C  IN EQUATION (11.1.14) C DO IP = 1 , N B ( IP ) = A ( IP , IP ) D ( IP ) = B ( IP ) Z ( IP ) = 0.D0 END DO C BEGIN ITERATION C NROT = 0 DO I = 1 , 50 C C         SUM OFF-DIAGONAL ELEMENTS C SM = 0.D0 DO IP = 1 , N - 1 DO IQ = IP + 1 , N SM = SM + DABS ( A ( IP , IQ )) END DO END DO C C          IF SM = 0., THEN RETURN.  THIS IS THE NORMAL RETURN, C          WHICH RELIES ON QUADRATIC CONVERGENCE TO MACHINE C          UNDERFLOW. C IF ( SM . EQ . 0.D0 ) RETURN C C          IN THE FIRST THREE SWEEPS CARRY OUT THE PQ ROTATION ONLY IF C           |A_PQ| > TRESH, WHERE TRESH IS SOME THRESHOLD VALUE, C           SEE EQUATION (11.1.25).  THEREAFTER TRESH = 0. C IF ( I . LT . 4 ) THEN TRESH = 0.2D0 * SM / N ** 2 ELSE TRESH = 0.D0 END IF C DO IP = 1 , N - 1 DO IQ = IP + 1 , N G = 10 0.D0 * DABS ( A ( IP , IQ )) C C              AFTER FOUR SWEEPS, SKIP THE ROTATION IF THE C               OFF-DIAGONAL ELEMENT IS SMALL. C IF (( I . GT . 4 ). AND .( DABS ( D ( IP )) + G . EQ . DABS ( D ( IP ))) + . AND .( DABS ( D ( IQ )) + G . EQ . DABS ( D ( IQ )))) THEN A ( IP , IQ ) = 0.D0 ELSE IF ( DABS ( A ( IP , IQ )). GT . TRESH ) THEN H = D ( IQ ) - D ( IP ) IF ( DABS ( H ) + G . EQ . DABS ( H )) THEN C C                  T = 1./(2.*THETA), EQUATION (11.1.10) C T = A ( IP , IQ ) / H ELSE THETA = 0.5D0 * H / A ( IP , IQ ) T = 1.D0 / ( DABS ( THETA ) + DSQRT ( 1.D0 + THETA ** 2.D0 )) IF ( THETA . LT . 0.D0 ) T = - T END IF C = 1.D0 / DSQRT ( 1.D0 + T ** 2.D0 ) S = T * C TAU = S / ( 1.D0 + C ) H = T * A ( IP , IQ ) Z ( IP ) = Z ( IP ) - H Z ( IQ ) = Z ( IQ ) + H D ( IP ) = D ( IP ) - H D ( IQ ) = D ( IQ ) + H A ( IP , IQ ) = 0.D0 C C               CASE OF ROTATIONS 1 <= J < P C DO J = 1 , IP - 1 G = A ( J , IP ) H = A ( J , IQ ) A ( J , IP ) = G - S * ( H + G * TAU ) A ( J , IQ ) = H + S * ( G - H * TAU ) END DO C C                CASE OF ROTATIONS P < J < Q C DO J = IP + 1 , IQ - 1 G = A ( IP , J ) H = A ( J , IQ ) A ( IP , J ) = G - S * ( H + G * TAU ) A ( J , IQ ) = H + S * ( G - H * TAU ) END DO C C                 CASE OF ROTATIONS Q < J <= N C DO J = IQ + 1 , N G = A ( IP , J ) H = A ( IQ , J ) A ( IP , J ) = G - S * ( H + G * TAU ) A ( IQ , J ) = H + S * ( G - H * TAU ) END DO DO J = 1 , N G = V ( J , IP ) H = V ( J , IQ ) V ( J , IP ) = G - S * ( H + G * TAU ) V ( J , IQ ) = H + S * ( G - H * TAU ) END DO NROT = NROT + 1 END IF END DO END DO C C          UPDATE D WITH THE SUM OF T*A_PQ, AND REINITIALIZE Z C DO IP = 1 , N B ( IP ) = B ( IP ) + Z ( IP ) D ( IP ) = B ( IP ) Z ( IP ) = 0.D0 END DO END DO C C IF THE ALGORITHM HAS REACHED THIS STAGE, THEN THERE C  ARE TOO MANY SWEEPS.  PRINT A DIAGNOSTIC AND CUT THE C  TIME INCREMENT. C WRITE ( * , '(/1X,A/)' ) '50 ITERATIONS IN JACOBI SHOULD NEVER HAPPEN' C RETURN END SUBROUTINE JACOBI C********************************************************************** SUBROUTINE EIGSRT ( D , V , N , NP ) C C     GIVEN THE EIGENVALUES D AND EIGENVECTORS V AS OUTPUT FROM C     JACOBI, THIS SUBROUTINE SORTS THE EIGENVALUES INTO ASCENDING C     ORDER AND REARRANGES THE COLMNS OF V ACCORDINGLY. C C     THE SUBROUTINE WAS TAKEN FROM 'NUMERICAL RECIPES.' C IMPLICIT NONE C INTEGER N , NP , I , J , K C DOUBLE PRECISION D ( NP ), V ( NP , NP ), P C DO I = 1 , N - 1 K = I P = D ( I ) DO J = I + 1 , N IF ( D ( J ). GE . P ) THEN K = J P = D ( J ) END IF END DO IF ( K . NE . I ) THEN D ( K ) = D ( I ) D ( I ) = P DO J = 1 , N P = V ( J , I ) V ( J , I ) = V ( J , K ) V ( J , K ) = P END DO END IF END DO C RETURN END SUBROUTINE EIGSRT","tags":"","loc":"sourcefile/spectral.for.html"},{"title":"tensorprod22.for – Fortran Program","text":"Contents Subroutines TENSORPROD2 Source Code tensorprod22.for Source Code SUBROUTINE TENSORPROD2 ( A , B , C , NDI ) C Implicit None C INTEGER I , J , K , L , NDI C DOUBLE PRECISION A ( NDI , NDI ), B ( NDI , NDI ), C ( NDI , NDI , NDI , NDI ) C DO I = 1 , NDI DO J = 1 , NDI DO K = 1 , NDI DO L = 1 , NDI C ( I , J , K , L ) = A ( I , J ) * B ( K , L ) END DO END DO END DO END DO C RETURN C end SUBROUTINE TENSORPROD2","tags":"","loc":"sourcefile/tensorprod22.for.html"},{"title":"csfilfic.for – Fortran Program","text":"Contents Subroutines CSFILFIC Source Code csfilfic.for Source Code SUBROUTINE CSFILFIC ( CFIC , RHO , LAMBDA , DW , DDW , M , RW , NDI ) C>    AFFINE NETWORK: 'FICTICIOUS' ELASTICITY TENSOR IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI , I1 , J1 , K1 , L1 DOUBLE PRECISION CFIC ( NDI , NDI , NDI , NDI ), M ( NDI ) DOUBLE PRECISION RHO , AUX , DW , DDW , RW , LAMBDA , AUX0 C AUX0 = DDW - ( LAMBDA ** ( - ONE )) * DW AUX = RHO * AUX0 * RW * ( LAMBDA ** ( - TWO )) DO I1 = 1 , NDI DO J1 = 1 , NDI DO K1 = 1 , NDI DO L1 = 1 , NDI CFIC ( I1 , J1 , K1 , L1 ) = AUX * M ( I1 ) * M ( J1 ) * M ( K1 ) * M ( L1 ) END DO END DO END DO END DO C RETURN END SUBROUTINE CSFILFIC","tags":"","loc":"sourcefile/csfilfic.for.html"},{"title":"contraction24.for – Fortran Program","text":"Contents Subroutines CONTRACTION24 Source Code contraction24.for Source Code SUBROUTINE CONTRACTION24 ( S , LT , RT , NDI ) C>       DOUBLE CONTRACTION BETWEEN 4TH ORDER AND 2ND ORDER  TENSOR C>      INPUT: C>       LT - RIGHT 2ND ORDER TENSOR C>       RT - LEFT  4TH ODER TENSOR C>      OUTPUT: C>       S - DOUBLE CONTRACTED TENSOR (2ND ORDER) IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER I1 , J1 , K1 , L1 , NDI C DOUBLE PRECISION LT ( NDI , NDI ), RT ( NDI , NDI , NDI , NDI ) DOUBLE PRECISION S ( NDI , NDI ) DOUBLE PRECISION AUX C DO K1 = 1 , NDI DO L1 = 1 , NDI AUX = ZERO DO I1 = 1 , NDI DO J1 = 1 , NDI AUX = AUX + LT ( K1 , L1 ) * RT ( I1 , J1 , K1 , L1 ) END DO END DO S ( K1 , L1 ) = AUX END DO END DO RETURN END SUBROUTINE CONTRACTION24","tags":"","loc":"sourcefile/contraction24.for.html"},{"title":"invariants.for – Fortran Program","text":"Contents Subroutines INVARIANTS Source Code invariants.for Source Code SUBROUTINE INVARIANTS ( A , INV1 , INV2 , NDI ) C>    1ST AND 2ND INVARIANTS OF A TENSOR IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI , I1 DOUBLE PRECISION A ( NDI , NDI ), AA ( NDI , NDI ) DOUBLE PRECISION INV1 , INV1AA , INV2 C INV1 = ZERO INV1AA = ZERO AA = MATMUL ( A , A ) DO I1 = 1 , NDI INV1 = INV1 + A ( I1 , I1 ) INV1AA = INV1AA + AA ( I1 , I1 ) END DO INV2 = ( ONE / TWO ) * ( INV1 * INV1 - INV1AA ) C RETURN END SUBROUTINE INVARIANTS","tags":"","loc":"sourcefile/invariants.for.html"},{"title":"sigiso.for – Fortran Program","text":"Contents Subroutines SIGISO Source Code sigiso.for Source Code SUBROUTINE SIGISO ( SISO , SFIC , PE , NDI ) C>    ISOCHORIC CAUCHY STRESS IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI DOUBLE PRECISION SISO ( NDI , NDI ), 1 PE ( NDI , NDI , NDI , NDI ), SFIC ( NDI , NDI ) C CALL CONTRACTION42 ( SISO , PE , SFIC , NDI ) C RETURN END SUBROUTINE SIGISO","tags":"","loc":"sourcefile/sigiso.for.html"},{"title":"vol.for – Fortran Program","text":"Contents Subroutines VOL Source Code vol.for Source Code SUBROUTINE VOL ( SSEV , PV , PPV , K , DET ) C>     VOLUMETRIC CONTRIBUTION :STRAIN ENERGY FUNCTION AND DERIVATIVES IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C DOUBLE PRECISION SSEV , PV , PPV DOUBLE PRECISION K , G , DET , AUX C G = ( ONE / FOUR ) * ( DET * DET - ONE - TWO * LOG ( DET )) C SSEV = K * G C PV = K * ( ONE / TWO ) * ( DET - ONE / DET ) AUX = K * ( ONE / TWO ) * ( ONE + ONE / ( DET * DET )) PPV = PV + DET * AUX C RETURN END SUBROUTINE VOL","tags":"","loc":"sourcefile/vol.for.html"},{"title":"push4.for – Fortran Program","text":"Contents Subroutines PUSH4 Source Code push4.for Source Code SUBROUTINE PUSH4 ( SPATIAL , MAT , F , DET , NDI ) C>        PIOLA TRANSFORMATION C>      INPUT: C>       MAT - MATERIAL ELASTICITY TENSOR C>       F - DEFORMATION GRADIENT C>       DET - DEFORMATION DETERMINANT C>      OUTPUT: C>       SPATIAL - SPATIAL ELASTICITY TENSOR IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER I1 , J1 , K1 , L1 , II1 , JJ1 , KK1 , LL1 , NDI C DOUBLE PRECISION MAT ( NDI , NDI , NDI , NDI ), F ( NDI , NDI ) DOUBLE PRECISION SPATIAL ( NDI , NDI , NDI , NDI ) DOUBLE PRECISION AUX , DET C DO I1 = 1 , NDI DO J1 = 1 , NDI DO K1 = 1 , NDI DO L1 = 1 , NDI AUX = ZERO DO II1 = 1 , NDI DO JJ1 = 1 , NDI DO KK1 = 1 , NDI DO LL1 = 1 , NDI AUX = AUX + ( DET ** ( - ONE )) * + F ( I1 , II1 ) * F ( J1 , JJ1 ) * + F ( K1 , KK1 ) * F ( L1 , LL1 ) * MAT ( II1 , JJ1 , KK1 , LL1 ) END DO END DO END DO END DO SPATIAL ( I1 , J1 , K1 , L1 ) = AUX END DO END DO END DO END DO C RETURN END SUBROUTINE PUSH4","tags":"","loc":"sourcefile/push4.for.html"},{"title":"hfilfic.for – Fortran Program","text":"Contents Subroutines HFILFIC Source Code hfilfic.for Source Code SUBROUTINE HFILFIC ( H , HH , PP , LAMBDA , M , RW , NDI ) C>      NON-AFFINE NETWORK: STRUCTURE TENSORS IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI , I1 , J1 , K1 , L1 DOUBLE PRECISION HH ( NDI , NDI , NDI , NDI ), M ( NDI ), H ( NDI , NDI ) DOUBLE PRECISION RW , LAMBDA , AUX0 , AUX , PP , PI , AUX1 C PI = FOUR * ATAN ( ONE ) AUX0 = FOUR * PI AUX = ( LAMBDA ** ( PP - TWO )) * RW AUX1 = ( PP - TWO ) * ( LAMBDA ** ( PP - FOUR )) * RW C DO I1 = 1 , NDI DO J1 = 1 , NDI H ( I1 , J1 ) = AUX * M ( I1 ) * M ( J1 ) DO K1 = 1 , NDI DO L1 = 1 , NDI HH ( I1 , J1 , K1 , L1 ) = AUX1 * M ( I1 ) * M ( J1 ) * M ( K1 ) * M ( L1 ) END DO END DO END DO END DO C RETURN END SUBROUTINE HFILFIC","tags":"","loc":"sourcefile/hfilfic.for.html"},{"title":"sigfilfic.for – Fortran Program","text":"Contents Subroutines SIGFILFIC Source Code sigfilfic.for Source Code SUBROUTINE SIGFILFIC ( SFIC , RHO , LAMBDA , DW , M , RW , NDI ) C>    SINGLE FILAMENT:  'FICTICIUOUS' CAUCHY STRESS IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI , I1 , J1 DOUBLE PRECISION SFIC ( NDI , NDI ), M ( NDI ) DOUBLE PRECISION RHO , AUX , DW , RW , LAMBDA C AUX = RHO * LAMBDA ** ( - ONE ) * RW * DW DO I1 = 1 , NDI DO J1 = 1 , NDI SFIC ( I1 , J1 ) = AUX * M ( I1 ) * M ( J1 ) END DO END DO C RETURN END SUBROUTINE SIGFILFIC","tags":"","loc":"sourcefile/sigfilfic.for.html"},{"title":"pk2iso.for – Fortran Program","text":"Contents Subroutines PK2ISO Source Code pk2iso.for Source Code SUBROUTINE PK2ISO ( PKISO , PKFIC , PL , DET , NDI ) C>    ISOCHORIC PK2 STRESS TENSOR IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI , I1 , J1 DOUBLE PRECISION PKISO ( NDI , NDI ), 1 PL ( NDI , NDI , NDI , NDI ), PKFIC ( NDI , NDI ) DOUBLE PRECISION DET , SCALE2 C CALL CONTRACTION42 ( PKISO , PL , PKFIC , NDI ) C SCALE2 = DET ** ( - TWO / THREE ) DO I1 = 1 , NDI DO J1 = 1 , NDI PKISO ( I1 , J1 ) = SCALE2 * PKISO ( I1 , J1 ) END DO END DO C RETURN END SUBROUTINE PK2ISO","tags":"","loc":"sourcefile/pk2iso.for.html"},{"title":"identity_tensors.for – Fortran Program","text":"Contents Subroutines ONEM Source Code identity_tensors.for Source Code SUBROUTINE ONEM ( A , AA , AAS , NDI ) C C>      THIS SUBROUTINE GIVES: C>          2ND ORDER IDENTITY TENSORS - A C>          4TH ORDER IDENTITY TENSOR - AA C>          4TH ORDER SYMMETRIC IDENTITY TENSOR - AAS C IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER I , J , K , L , NDI C DOUBLE PRECISION A ( NDI , NDI ), AA ( NDI , NDI , NDI , NDI ), 1 AAS ( NDI , NDI , NDI , NDI ) C DO I = 1 , NDI DO J = 1 , NDI IF ( I . EQ . J ) THEN A ( I , J ) = ONE ELSE A ( I , J ) = ZERO END IF END DO END DO C DO I = 1 , NDI DO J = 1 , NDI DO K = 1 , NDI DO L = 1 , NDI AA ( I , J , K , L ) = A ( I , K ) * A ( J , L ) AAS ( I , J , K , L ) = ( ONE / TWO ) * ( A ( I , K ) * A ( J , L ) + A ( I , L ) * A ( J , K )) END DO END DO END DO END DO C RETURN END SUBROUTINE ONEM","tags":"","loc":"sourcefile/identity_tensors.for.html"},{"title":"metiso.for – Fortran Program","text":"Contents Subroutines METISO Source Code metiso.for Source Code SUBROUTINE METISO ( CMISO , CMFIC , PL , PKISO , PKFIC , C , UNIT2 , DET , NDI ) C>    ISOCHORIC MATERIAL ELASTICITY TENSOR IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI , I1 , J1 , K1 , L1 DOUBLE PRECISION UNIT2 ( NDI , NDI ), PL ( NDI , NDI , NDI , NDI ), 1 CMISO ( NDI , NDI , NDI , NDI ), PKISO ( NDI , NDI ), 2 CMFIC ( NDI , NDI , NDI , NDI ), PKFIC ( NDI , NDI ), 3 CISOAUX ( NDI , NDI , NDI , NDI ), 4 CISOAUX1 ( NDI , NDI , NDI , NDI ), C ( NDI , NDI ), 5 PLT ( NDI , NDI , NDI , NDI ), CINV ( NDI , NDI ), 6 PLL ( NDI , NDI , NDI , NDI ) DOUBLE PRECISION TRFIC , XX , YY , ZZ , DET , AUX , AUX1 C CALL MATINV3D ( C , CINV , NDI ) CISOAUX1 = ZERO CISOAUX = ZERO CALL CONTRACTION44 ( CISOAUX1 , PL , CMFIC , NDI ) C C  transpose of lagrangian projection tensor DO I1 = 1 , NDI DO J1 = 1 , NDI DO K1 = 1 , NDI DO L1 = 1 , NDI PLT ( I1 , J1 , K1 , L1 ) = PL ( K1 , L1 , I1 , J1 ) END DO END DO END DO END DO C CALL CONTRACTION44 ( CISOAUX , CISOAUX1 , PLT , NDI ) C TRFIC = ZERO AUX = DET ** ( - TWO / THREE ) AUX1 = AUX ** TWO DO I1 = 1 , NDI TRFIC = TRFIC + AUX * PKFIC ( I1 , I1 ) * C ( I1 , I1 ) END DO C DO I1 = 1 , NDI DO J1 = 1 , NDI DO K1 = 1 , NDI DO L1 = 1 , NDI XX = AUX1 * CISOAUX ( I1 , J1 , K1 , L1 ) PLL ( I1 , J1 , K1 , L1 ) = ( ONE / TWO ) * ( CINV ( I1 , K1 ) * CINV ( J1 , L1 ) + 1 CINV ( I1 , L1 ) * CINV ( J1 , K1 )) - 2 ( ONE / THREE ) * CINV ( I1 , J1 ) * CINV ( K1 , L1 ) YY = TRFIC * PLL ( I1 , J1 , K1 , L1 ) ZZ = PKISO ( I1 , J1 ) * CINV ( K1 , L1 ) + CINV ( I1 , J1 ) * PKISO ( K1 , L1 ) C CMISO ( I1 , J1 , K1 , L1 ) = XX + ( TWO / THREE ) * YY - ( TWO / THREE ) * ZZ END DO END DO END DO END DO C RETURN END SUBROUTINE METISO","tags":"","loc":"sourcefile/metiso.for.html"},{"title":"setiso.for – Fortran Program","text":"Contents Subroutines SETISO Source Code setiso.for Source Code SUBROUTINE SETISO ( CISO , CFIC , PE , SISO , SFIC , UNIT2 , NDI ) C>    ISOCHORIC SPATIAL ELASTICITY TENSOR IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI , I1 , J1 , K1 , L1 DOUBLE PRECISION UNIT2 ( NDI , NDI ), PE ( NDI , NDI , NDI , NDI ), 1 CISO ( NDI , NDI , NDI , NDI ), SISO ( NDI , NDI ), 2 CFIC ( NDI , NDI , NDI , NDI ), SFIC ( NDI , NDI ), 3 CISOAUX ( NDI , NDI , NDI , NDI ), 4 CISOAUX1 ( NDI , NDI , NDI , NDI ) DOUBLE PRECISION TRFIC , XX , YY , ZZ C CISOAUX1 = ZERO CISOAUX = ZERO CALL CONTRACTION44 ( CISOAUX1 , PE , CFIC , NDI ) CALL CONTRACTION44 ( CISOAUX , CISOAUX1 , PE , NDI ) C TRFIC = ZERO DO I1 = 1 , NDI TRFIC = TRFIC + SFIC ( I1 , I1 ) END DO C DO I1 = 1 , NDI DO J1 = 1 , NDI DO K1 = 1 , NDI DO L1 = 1 , NDI XX = CISOAUX ( I1 , J1 , K1 , L1 ) YY = TRFIC * PE ( I1 , J1 , K1 , L1 ) ZZ = SISO ( I1 , J1 ) * UNIT2 ( K1 , L1 ) + UNIT2 ( I1 , J1 ) * SISO ( K1 , L1 ) C CISO ( I1 , J1 , K1 , L1 ) = XX + ( TWO / THREE ) * YY - ( TWO / THREE ) * ZZ END DO END DO END DO END DO C RETURN END SUBROUTINE SETISO","tags":"","loc":"sourcefile/setiso.for.html"},{"title":"push2.for – Fortran Program","text":"Contents Subroutines PUSH2 Source Code push2.for Source Code SUBROUTINE PUSH2 ( SIG , PK , F , DET , NDI ) C>        PIOLA TRANSFORMATION C>      INPUT: C>       PK - 2ND PIOLA KIRCHOOF STRESS TENSOR C>       F - DEFORMATION GRADIENT C>       DET - DEFORMATION DETERMINANT C>      OUTPUT: C>       SIG - CAUCHY STRESS TENSOR IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER I1 , J1 , II1 , JJ1 , NDI DOUBLE PRECISION PK ( NDI , NDI ), F ( NDI , NDI ) DOUBLE PRECISION SIG ( NDI , NDI ) DOUBLE PRECISION AUX , DET C DO I1 = 1 , NDI DO J1 = 1 , NDI AUX = ZERO DO II1 = 1 , NDI DO JJ1 = 1 , NDI AUX = AUX + ( DET ** ( - ONE )) * F ( I1 , II1 ) * F ( J1 , JJ1 ) * PK ( II1 , JJ1 ) END DO END DO SIG ( I1 , J1 ) = AUX END DO END DO C RETURN END SUBROUTINE PUSH2","tags":"","loc":"sourcefile/push2.for.html"},{"title":"deformation.for – Fortran Program","text":"Contents Subroutines DEFORMATION Source Code deformation.for Source Code SUBROUTINE DEFORMATION ( F , C , B , NDI ) C>     RIGHT AND LEFT CAUCHY-GREEN DEFORMATION TENSORS IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI DOUBLE PRECISION F ( NDI , NDI ), C ( NDI , NDI ), B ( NDI , NDI ) C     RIGHT CAUCHY-GREEN DEFORMATION TENSOR C = MATMUL ( TRANSPOSE ( F ), F ) C     LEFT CAUCHY-GREEN DEFORMATION TENSOR B = MATMUL ( F , TRANSPOSE ( F )) RETURN END SUBROUTINE DEFORMATION","tags":"","loc":"sourcefile/deformation.for.html"},{"title":"main.f90 – Fortran Program","text":"Contents Programs TEST_GENERAL_UMAT Source Code main.f90 Source Code PROGRAM TEST_GENERAL_UMAT use , intrinsic :: ISO_Fortran_env INCLUDE 'ABA_PARAM.INC' INCLUDE 'PARAM_UMAT.INC' !C     ADD COMMON BLOCKS HERE IF NEEDED () !C      COMMON /KBLOCK/KBLOCK PARAMETER ( NTENS = 6 , NSTATEV = NSDV , NPROPS = 23 , NDI = 3 , NSHR = 3 ) PARAMETER ( NOEL = 1 , NPT = 8 ) ! CHARACTER * 8 CMNAME DIMENSION STRESS ( NTENS ), STATEV ( NSTATEV ), STATEVP ( NSTATEV ), DDSDDE ( NTENS , NTENS ), DDSDDT ( NTENS ), & DRPLDE ( NTENS ), STRAN ( NTENS ), DSTRAN ( NTENS ), TIME ( 2 ), PREDEF ( 1 ), DPRED ( 1 ), & PROPS ( NPROPS ), COORDS ( 3 ), DROT ( 3 , 3 ), DFGRD0 ( 3 , 3 ), DFGRD1 ( 3 , 3 ) ! CHARACTER * 8 filename integer un ! i = 1.0d0 j = 1.0d0 DO i = 1 , NTENS DO j = 1 , NTENS DDSDDE ( i , j ) = 0.0D0 ENDDO STRESS ( i ) = 0.0D0 ENDDO ! ! DEFORMATION GRADIENT DFGRD1 ( 1 , 1 ) = 1.1D0 DFGRD1 ( 1 , 2 ) = 0.0D0 DFGRD1 ( 1 , 3 ) = 0.0D0 DFGRD1 ( 2 , 1 ) = 0.0D0 DFGRD1 ( 2 , 2 ) = 1.0D0 / DFGRD1 ( 1 , 1 ) DFGRD1 ( 2 , 3 ) = 0.0D0 DFGRD1 ( 3 , 1 ) = 0.0D0 DFGRD1 ( 3 , 2 ) = 0.0D0 DFGRD1 ( 3 , 3 ) = 1.0D0 / DFGRD1 ( 1 , 1 ) ! time ( 1 ) = 0.d0 time ( 2 ) = 0.d0 call UEXTERNALDB ( 0 , 0 , time , 0.D0 , 0 , 0 ) ! ! MATERIAL PROPERTIES ! ! k PENALTY PARAMETER PROPS ( 1 ) = 2.d0 / 10000 0.d0 ! ISOTROPIC MATRIX ! C10= PROPS ( 2 ) = 1.00d0 ! C01 PROPS ( 3 ) = 1.00d0 !k1 PROPS ( 4 ) = 0.00d0 !k2 PROPS ( 5 ) = 0.1d0 !kappa PROPS ( 6 ) = 0.1d0 ! !viscous parameters - maxwell ! v - number of dashpots PROPS ( 17 ) = 0 !tau1 % PROPS ( 18 ) = 2.0d0 !teta1 PROPS ( 19 ) = 0.835d0 !tau2 % PROPS ( 20 ) = 1.2d0 !teta2 PROPS ( 21 ) = 7.0d0 !tau3 % PROPS ( 22 ) = 1 2.d0 !teta3 PROPS ( 23 ) = 2.0d0 ! STATEV = 0.D0 ! erf = 0.d0 RHO = 0.D0 ! ! DFGRD1 ( 1 , 1 ) = 1.0D0 DFGRD1 ( 1 , 2 ) = 0.0D0 DFGRD1 ( 1 , 3 ) = 0.0d0 DFGRD1 ( 2 , 1 ) = 0.0d0 DFGRD1 ( 2 , 2 ) = 1.0D0 DFGRD1 ( 2 , 3 ) = 0.0d0 DFGRD1 ( 3 , 1 ) = 0.0d0 DFGRD1 ( 3 , 2 ) = 0.0d0 DFGRD1 ( 3 , 3 ) = 1.0D0 ! !################################################################################################! !!     TENSILE MONOTONIC LOAD TEST DFGRD1 ( 1 , 1 ) = 1.2D0 DFGRD1 ( 1 , 2 ) = 0.0D0 DFGRD1 ( 1 , 3 ) = 0.0d0 DFGRD1 ( 2 , 1 ) = 0.0d0 DFGRD1 ( 2 , 2 ) = 1 / sqrt ( DFGRD1 ( 1 , 1 )) DFGRD1 ( 2 , 3 ) = 0.0d0 DFGRD1 ( 3 , 1 ) = 0.0d0 DFGRD1 ( 3 , 2 ) = 0.0d0 DFGRD1 ( 3 , 3 ) = 1 / sqrt ( DFGRD1 ( 1 , 1 )) ! CALL UMAT ( STRESS , STATEV , DDSDDE , SSE , SPD , SCD , RPL , DDSDDT , DRPLDE , DRPLDT , STRAN , & DSTRAN , TIME , DTIME , TEMP , DTEMP , PREDEF , DPRED , CMNAME , NDI , NSHR , NTENS , NSTATEV , PROPS , & NPROPS , COORDS , DROT , PNEWDT , CELENT , DFGRD0 , DFGRD1 , NOEL , NPT , LAYER , KSPT , KSTEP , KINC ) write ( * , * ) STRESS write ( * , * ) write ( * , * ) DDSDDE close ( 150 ) !################################################################################################! ! END PROGRAM","tags":"","loc":"sourcefile/main.f90.html"},{"title":"fslip.for – Fortran Program","text":"Contents Subroutines FSLIP Source Code fslip.for Source Code SUBROUTINE FSLIP ( F , FBAR , DET , NDI ) C>     DISTORTION GRADIENT IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI , I1 , J1 DOUBLE PRECISION F ( NDI , NDI ), FBAR ( NDI , NDI ) DOUBLE PRECISION DET , SCALE1 C C     JACOBIAN DETERMINANT DET = F ( 1 , 1 ) * F ( 2 , 2 ) * F ( 3 , 3 ) 1 - F ( 1 , 2 ) * F ( 2 , 1 ) * F ( 3 , 3 ) C IF ( NDI . EQ . 3 ) THEN DET = DET + F ( 1 , 2 ) * F ( 2 , 3 ) * F ( 3 , 1 ) 1 + F ( 1 , 3 ) * F ( 3 , 2 ) * F ( 2 , 1 ) 2 - F ( 1 , 3 ) * F ( 3 , 1 ) * F ( 2 , 2 ) 3 - F ( 2 , 3 ) * F ( 3 , 2 ) * F ( 1 , 1 ) END IF C SCALE1 = DET ** ( - ONE / THREE ) C DO I1 = 1 , NDI DO J1 = 1 , NDI FBAR ( I1 , J1 ) = SCALE1 * F ( I1 , J1 ) END DO END DO C RETURN END SUBROUTINE FSLIP","tags":"","loc":"sourcefile/fslip.for.html"},{"title":"cmatanisomatfic.for – Fortran Program","text":"Contents Subroutines CMATANISOMATFIC Source Code cmatanisomatfic.for Source Code SUBROUTINE CMATANISOMATFIC ( CMANISOMATFIC , M0 , DANISO , UNIT2 , DET , NDI ) C C>    ANISOTROPIC MATRIX: MATERIAL 'FICTICIOUS' ELASTICITY TENSOR IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI , I , J , K , L DOUBLE PRECISION CMANISOMATFIC ( NDI , NDI , NDI , NDI ), UNIT2 ( NDI , NDI ), 1 M0 ( NDI , NDI ), DANISO ( 3 ), DET DOUBLE PRECISION CINV4 ( NDI , NDI , NDI , NDI ), CINV14 ( NDI , NDI , NDI , NDI ) DOUBLE PRECISION D2UDI4 , D2UDI1DI4 DOUBLE PRECISION IMM ( NDI , NDI , NDI , NDI ), MMI ( NDI , NDI , NDI , NDI ), 1 MM0 ( NDI , NDI , NDI , NDI ) C C----------------------------------------------------------------------------- !2ND DERIVATIVE OF SSEANISO IN ORDER TO I4 D2UDI4 = DANISO ( 2 ) !2ND DERIVATIVE OF SSEANISO IN ORDER TO I1 AND I4 D2UDI1DI4 = DANISO ( 3 ) C CALL TENSORPROD2 ( M0 , M0 , MM0 , NDI ) CALL TENSORPROD2 ( UNIT2 , M0 , IMM , NDI ) CALL TENSORPROD2 ( M0 , UNIT2 , MMI , NDI ) C DO I = 1 , NDI DO J = 1 , NDI DO K = 1 , NDI DO L = 1 , NDI CINV4 ( I , J , K , L ) = D2UDI4 * MM0 ( I , J , K , L ) CINV14 ( I , J , K , L ) = D2UDI1DI4 * ( IMM ( I , J , K , L ) + MMI ( I , J , K , L )) CMANISOMATFIC ( I , J , K , L ) = FOUR * ( CINV4 ( I , J , K , L ) + CINV14 ( I , J , K , L )) END DO END DO END DO END DO C RETURN END SUBROUTINE CMATANISOMATFIC","tags":"","loc":"sourcefile/cmatanisomatfic.for.html"},{"title":"sdvwrite.for – Fortran Program","text":"Contents Subroutines SDVWRITE Source Code sdvwrite.for Source Code SUBROUTINE SDVWRITE ( DET , STATEV , VV ) C>    VISCOUS DISSIPATION: WRITE STATE VARS IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER VV , POS1 , POS2 , POS3 , I1 DOUBLE PRECISION STATEV ( NSDV ), DET C        write your sdvs here. they should be allocated C                after the viscous terms (check hvwrite) !        POS1=9*VV !        DO I1=1,NCH !         POS2=POS1+I1 !         STATEV(POS2)=FRAC(I1) !        ENDDO !C !        DO I1=1,NWP !          POS3=POS2+I1 !          STATEV(POS3)=RU0(I1) !        ENDDO !        STATEV(POS3+1)=DET !        STATEV(POS3+2)=VARACT !        STATEV(POS3+3)=DIRMAX(1) !        STATEV(POS3+4)=DIRMAX(2) !        STATEV(POS3+5)=DIRMAX(3) RETURN C END SUBROUTINE SDVWRITE","tags":"","loc":"sourcefile/sdvwrite.for.html"},{"title":"visco.for – Fortran Program","text":"Contents Subroutines VISCO Source Code visco.for Source Code SUBROUTINE VISCO ( PK , CMAT , VV , PKVOL , PKISO , CMATVOL , CMATISO , DTIME , 1 VSCPROPS , STATEV , NDI ) C>    VISCOUS DISSIPATION: MAXWELL SPRINGS AND DASHPOTS SCHEME IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER I1 , J1 , K1 , L1 , NDI , VV , V1 DOUBLE PRECISION PK ( NDI , NDI ), PKVOL ( NDI , NDI ), PKISO ( NDI , NDI ), 1 CMAT ( NDI , NDI , NDI , NDI ), CMATVOL ( NDI , NDI , NDI , NDI ), 2 CMATISO ( NDI , NDI , NDI , NDI ), VSCPROPS ( 6 ) DOUBLE PRECISION Q ( NDI , NDI ), QV ( NDI , NDI ), HV ( NDI , NDI ), 1 HV0 ( NDI , NDI ), STATEV ( NSDV ) DOUBLE PRECISION DTIME , TETA , TAU , AUX , AUXC C Q = ZERO QV = ZERO HV = ZERO AUXC = ZERO C C     ( GENERAL MAXWELL DASHPOTS) DO V1 = 1 , VV C TAU = VSCPROPS ( 2 * V1 - 1 ) TETA = VSCPROPS ( 2 * V1 ) C C      READ STATE VARIABLES CALL HVREAD ( HV , STATEV , V1 , NDI ) HV0 = HV C        RALAXATION TENSORS CALL RELAX ( QV , HV , AUX , HV0 , PKISO , DTIME , TAU , TETA , NDI ) AUXC = AUXC + AUX C        WRITE STATE VARIABLES CALL HVWRITE ( STATEV , HV , V1 , NDI ) C Q = Q + QV C END DO C AUXC = ONE + AUXC PK = PKVOL + PKISO C DO I1 = 1 , NDI DO J1 = 1 , NDI PK ( I1 , J1 ) = PK ( I1 , J1 ) + Q ( I1 , J1 ) DO K1 = 1 , NDI DO L1 = 1 , NDI CMAT ( I1 , J1 , K1 , L1 ) = CMATVOL ( I1 , J1 , K1 , L1 ) + 1 AUXC * CMATISO ( I1 , J1 , K1 , L1 ) ENDDO ENDDO ENDDO ENDDO C C RETURN END SUBROUTINE VISCO","tags":"","loc":"sourcefile/visco.for.html"},{"title":"resetdfgr.for – Fortran Program","text":"Contents Subroutines RESETDFGRD Source Code resetdfgr.for Source Code SUBROUTINE RESETDFGRD ( DFGRD , NDI ) C IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' INTEGER NDI DOUBLE PRECISION DFGRD ( NDI , NDI ) DFGRD ( 1 , 1 ) = ONE DFGRD ( 1 , 2 ) = ZERO DFGRD ( 1 , 3 ) = ZERO DFGRD ( 2 , 1 ) = ZERO DFGRD ( 2 , 2 ) = ONE DFGRD ( 2 , 3 ) = ZERO DFGRD ( 3 , 1 ) = ZERO DFGRD ( 3 , 2 ) = ZERO DFGRD ( 3 , 3 ) = ONE END","tags":"","loc":"sourcefile/resetdfgr.for.html"},{"title":"fibdir.for – Fortran Program","text":"Contents Subroutines FIBDIR Source Code fibdir.for Source Code SUBROUTINE FIBDIR ( FIB , ST0 , ST , NE , NOEL , NDI , VORIF , VD , DISTGR , DFGRD1 ) C IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI , NE , NOEL , INOEL , I , J , I1 , J1 DOUBLE PRECISION SUM1 , DFGRD1 ( 3 , 3 ), DNORM DOUBLE PRECISION VORIF ( 3 ), ST ( 3 , 3 ), VD ( 3 ), ST0 ( 3 , 3 ), DISTGR ( 3 , 3 ) DOUBLE PRECISION FIB ( NE , 4 ) C INOEL = 0 I = 0 DO I = 1 , NE C               ELEMENT IDENTIFICATION IF ( NOEL . EQ . INT ( FIB ( I , 1 ))) THEN INOEL = I ENDIF ENDDO C C     FIB - FIBER ORIENTATION DNORM = DSQRT ( FIB ( INOEL , 2 ) * FIB ( INOEL , 2 ) + 1 FIB ( INOEL , 3 ) * FIB ( INOEL , 3 ) + 2 FIB ( INOEL , 4 ) * FIB ( INOEL , 4 )) C C       UNDERFORMED FIBER ORIENTATION TENSOR C DO I1 = 1 , NDI J1 = I1 + 1 C       FIBER ORIENTATION NORMALIZED VECTOR - FAMILY 1 VORIF ( I1 ) = FIB ( INOEL , J1 ) / DNORM END DO C DO I = 1 , NDI SUM1 = ZERO DO J = 1 , NDI SUM1 = SUM1 + DFGRD1 ( I , J ) * VORIF ( J ) ENDDO C     FIBER DIRECTIONS IN THE DEFORMED CONFIGURATION C               -FAMILY 1 VD ( I ) = SUM1 ENDDO DNORM = DSQRT ( VD ( 1 ) * VD ( 1 ) + 1 VD ( 2 ) * VD ( 2 ) + 2 VD ( 3 ) * VD ( 3 )) C           COSINE OF THE ANGLE BETWEEN FIBERS C C C-------------------------------------------------------------------------- DO I = 1 , NDI DO J = 1 , NDI C       STRUCTURAL TENSOR - FAMILY 1 ST0 ( I , J ) = VORIF ( I ) * VORIF ( J ) END DO END DO C C       STRUCTURE TENSOR IN THE DEFORMED CONFIGURATION - FAMILY 1 ST = MATMUL ( ST0 , TRANSPOSE ( DISTGR )) ST = MATMUL ( DISTGR , ST ) C C RETURN END SUBROUTINE FIBDIR","tags":"","loc":"sourcefile/fibdir.for.html"},{"title":"index.for – Fortran Program","text":"Contents Subroutines INDEXX Source Code index.for Source Code SUBROUTINE INDEXX ( STRESS , DDSDDE , SIG , TNG , NTENS , NDI ) C>    INDEXATION: FULL SIMMETRY  IN STRESSES AND ELASTICITY TENSORS IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER II1 ( 6 ), II2 ( 6 ), NTENS , NDI , I1 , J1 DOUBLE PRECISION STRESS ( NTENS ), DDSDDE ( NTENS , NTENS ) DOUBLE PRECISION SIG ( NDI , NDI ), TNG ( NDI , NDI , NDI , NDI ) DOUBLE PRECISION PP1 , PP2 C II1 ( 1 ) = 1 II1 ( 2 ) = 2 II1 ( 3 ) = 3 II1 ( 4 ) = 1 II1 ( 5 ) = 1 II1 ( 6 ) = 2 C II2 ( 1 ) = 1 II2 ( 2 ) = 2 II2 ( 3 ) = 3 II2 ( 4 ) = 2 II2 ( 5 ) = 3 II2 ( 6 ) = 3 C DO I1 = 1 , NTENS C       STRESS VECTOR STRESS ( I1 ) = SIG ( II1 ( I1 ), II2 ( I1 )) DO J1 = 1 , NTENS C       DDSDDE - FULLY SIMMETRY IMPOSED PP1 = TNG ( II1 ( I1 ), II2 ( I1 ), II1 ( J1 ), II2 ( J1 )) PP2 = TNG ( II1 ( I1 ), II2 ( I1 ), II2 ( J1 ), II1 ( J1 )) DDSDDE ( I1 , J1 ) = ( ONE / TWO ) * ( PP1 + PP2 ) END DO END DO C RETURN C END SUBROUTINE INDEXX","tags":"","loc":"sourcefile/index.for.html"},{"title":"rotation.for – Fortran Program","text":"Contents Subroutines ROTATION Source Code rotation.for Source Code SUBROUTINE ROTATION ( F , R , U , NDI ) C>    COMPUTES ROTATION TENSOR IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI DOUBLE PRECISION F ( NDI , NDI ), R ( NDI , NDI ), U ( NDI , NDI ), UINV ( NDI , NDI ) C CALL MATINV3D ( U , UINV , NDI ) C R = MATMUL ( F , UINV ) RETURN END SUBROUTINE ROTATION","tags":"","loc":"sourcefile/rotation.for.html"},{"title":"cmatisomatfic.for – Fortran Program","text":"Contents Subroutines CMATISOMATFIC Source Code cmatisomatfic.for Source Code SUBROUTINE CMATISOMATFIC ( CMISOMATFIC , CBAR , CBARI1 , CBARI2 , 1 DISO , UNIT2 , UNIT4 , DET , NDI ) C>    ISOTROPIC MATRIX: MATERIAL 'FICTICIOUS' ELASTICITY TENSOR IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI , I1 , J1 , K1 , L1 DOUBLE PRECISION CMISOMATFIC ( NDI , NDI , NDI , NDI ), UNIT2 ( NDI , NDI ), 1 CBAR ( NDI , NDI ), DISO ( 5 ), 2 UNIT4 ( NDI , NDI , NDI , NDI ) DOUBLE PRECISION CBARI1 , CBARI2 DOUBLE PRECISION DUDI1 , DUDI2 , D2UD2I1 , D2UD2I2 , D2UDI1I2 DOUBLE PRECISION AUX , AUX1 , AUX2 , AUX3 , AUX4 , DET DOUBLE PRECISION UIJ , UKL , CIJ , CKL C DUDI1 = DISO ( 1 ) DUDI2 = DISO ( 2 ) D2UD2I1 = DISO ( 3 ) D2UD2I2 = DISO ( 4 ) D2UDI1I2 = DISO ( 5 ) C AUX1 = FOUR * ( D2UD2I1 + TWO * CBARI1 * D2UDI1I2 + 1 DUDI2 + CBARI1 * CBARI1 * D2UD2I2 ) AUX2 =- FOUR * ( D2UDI1I2 + CBARI1 * D2UD2I2 ) AUX3 = FOUR * D2UD2I2 AUX4 =- FOUR * DUDI2 DO I1 = 1 , NDI DO J1 = 1 , NDI DO K1 = 1 , NDI DO L1 = 1 , NDI UIJ = UNIT2 ( I1 , J1 ) UKL = UNIT2 ( K1 , L1 ) CIJ = CBAR ( I1 , J1 ) CKL = CBAR ( K1 , L1 ) AUX = AUX1 * UIJ * UKL + 1 AUX2 * ( UIJ * CKL + CIJ * UKL ) + AUX3 * CIJ * CKL + 3 AUX4 * UNIT4 ( I1 , J1 , K1 , L1 ) CMISOMATFIC ( I1 , J1 , K1 , L1 ) = AUX END DO END DO END DO END DO C RETURN END SUBROUTINE CMATISOMATFIC","tags":"","loc":"sourcefile/cmatisomatfic.for.html"},{"title":"proj_lagrangian.for – Fortran Program","text":"Contents Subroutines PROJLAG Source Code proj_lagrangian.for Source Code SUBROUTINE PROJLAG ( C , AA , PL , NDI ) C>    LAGRANGIAN PROJECTION TENSOR C      INPUTS: C          IDENTITY TENSORS - A, AA C          ISOCHORIC LEFT CAUCHY GREEN TENSOR - C C          INVERSE OF C - CINV C      OUTPUTS: C          4TH ORDER SYMMETRIC LAGRANGIAN PROJECTION TENSOR - PL C IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER I , J , K , L , NDI C DOUBLE PRECISION CINV ( NDI , NDI ), AA ( NDI , NDI , NDI , NDI ), 1 PL ( NDI , NDI , NDI , NDI ), C ( NDI , NDI ) C CALL MATINV3D ( C , CINV , NDI ) C DO I = 1 , NDI DO J = 1 , NDI DO K = 1 , NDI DO L = 1 , NDI PL ( I , J , K , L ) = AA ( I , J , K , L ) - ( ONE / THREE ) * ( CINV ( I , J ) * C ( K , L )) END DO END DO END DO END DO C RETURN END SUBROUTINE PROJLAG","tags":"","loc":"sourcefile/proj_lagrangian.for.html"},{"title":"relax.for – Fortran Program","text":"Contents Subroutines RELAX Source Code relax.for Source Code SUBROUTINE RELAX ( QV , HV , AUX1 , HV0 , PKISO , DTIME , TAU , TETA , NDI ) C>    VISCOUS DISSIPATION: STRESS RELAXATION TENSORS IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER I1 , J1 , NDI DOUBLE PRECISION QV ( NDI , NDI ), HV ( NDI , NDI ), PKISO ( NDI , NDI ), 1 HV0 ( NDI , NDI ) DOUBLE PRECISION DTIME , TETA , TAU , AUX1 , AUX C QV = ZERO HV = ZERO AUX = DEXP ( - DTIME * (( TWO * TAU ) ** ( - ONE ))) AUX1 = TETA * AUX DO I1 = 1 , NDI DO J1 = 1 , NDI QV ( I1 , J1 ) = HV0 ( I1 , J1 ) + AUX1 * PKISO ( I1 , J1 ) HV ( I1 , J1 ) = AUX * ( AUX * QV ( I1 , J1 ) - TETA * PKISO ( I1 , J1 )) END DO END DO C RETURN END SUBROUTINE RELAX","tags":"","loc":"sourcefile/relax.for.html"},{"title":"cisomatfic.for – Fortran Program","text":"Contents Subroutines CSISOMATFIC Source Code cisomatfic.for Source Code SUBROUTINE CSISOMATFIC ( CISOMATFIC , CMISOMATFIC , DISTGR , DET , NDI ) C>    ISOTROPIC MATRIX: SPATIAL 'FICTICIOUS' ELASTICITY TENSOR IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI DOUBLE PRECISION CMISOMATFIC ( NDI , NDI ), DISTGR ( NDI , NDI ), 1 CISOMATFIC ( NDI , NDI , NDI , NDI ) DOUBLE PRECISION DET C CALL PUSH4 ( CISOMATFIC , CMISOMATFIC , DISTGR , DET , NDI ) C RETURN END SUBROUTINE CSISOMATFIC","tags":"","loc":"sourcefile/cisomatfic.for.html"},{"title":"hvread.for – Fortran Program","text":"Contents Subroutines HVREAD Source Code hvread.for Source Code SUBROUTINE HVREAD ( HV , STATEV , V1 , NDI ) C>    VISCOUS DISSIPATION: READ STATE VARS IMPLICIT NONE INCLUDE 'PARAM_UMAT.INC' C INTEGER NDI , V1 , POS DOUBLE PRECISION HV ( NDI , NDI ), STATEV ( NSDV ) C POS = 9 * V1 - 9 HV ( 1 , 1 ) = STATEV ( 1 + POS ) HV ( 1 , 2 ) = STATEV ( 2 + POS ) HV ( 1 , 3 ) = STATEV ( 3 + POS ) HV ( 2 , 1 ) = STATEV ( 4 + POS ) HV ( 2 , 2 ) = STATEV ( 5 + POS ) HV ( 2 , 3 ) = STATEV ( 6 + POS ) HV ( 3 , 1 ) = STATEV ( 7 + POS ) HV ( 3 , 2 ) = STATEV ( 8 + POS ) HV ( 3 , 3 ) = STATEV ( 9 + POS ) C RETURN C END SUBROUTINE HVREAD","tags":"","loc":"sourcefile/hvread.for.html"},{"title":"PULL2 – Fortran Program","text":"subroutine PULL2(PK, SIG, FINV, DET, NDI) PULL-BACK TIMES DET OF A 2ND ORDER TENSOR Arguments Type Intent Optional Attributes Name double precision :: PK (NDI,NDI) double precision :: SIG (NDI,NDI) double precision :: FINV (NDI,NDI) double precision :: DET integer :: NDI Contents None","tags":"","loc":"proc/pull2.html"},{"title":"PINVARIANTS – Fortran Program","text":"subroutine PINVARIANTS(A, INV4, NDI, ST, LAMBDA, BARLAMBDA, DET) AND 4TH PSEUDO-INVARIANTS OF A TENSOR Arguments Type Intent Optional Attributes Name double precision :: A (NDI,NDI) double precision :: INV4 integer :: NDI double precision :: ST (NDI,NDI) double precision :: LAMBDA double precision :: BARLAMBDA double precision :: DET Contents None","tags":"","loc":"proc/pinvariants.html"},{"title":"METVOL – Fortran Program","text":"subroutine METVOL(CVOL, C, PV, PPV, DET, NDI) VOLUMETRIC MATERIAL ELASTICITY TENSOR Arguments Type Intent Optional Attributes Name double precision :: CVOL (NDI,NDI,NDI,NDI) double precision :: C (NDI,NDI) double precision :: PV double precision :: PPV double precision :: DET integer :: NDI Contents None","tags":"","loc":"proc/metvol.html"},{"title":"CONTRACTION42 – Fortran Program","text":"subroutine CONTRACTION42(S, LT, RT, NDI) DOUBLE CONTRACTION BETWEEN 4TH ORDER AND 2ND ORDER  TENSOR INPUT: LT - RIGHT 4TH ORDER TENSOR RT - LEFT  2ND ODER TENSOR OUTPUT: S - DOUBLE CONTRACTED TENSOR (2ND ORDER) Arguments Type Intent Optional Attributes Name double precision :: S (NDI,NDI) double precision :: LT (NDI,NDI,NDI,NDI) double precision :: RT (NDI,NDI) integer :: NDI Contents None","tags":"","loc":"proc/contraction42.html"},{"title":"PROJEUL – Fortran Program","text":"subroutine PROJEUL(A, AA, PE, NDI) EULERIAN PROJECTION TENSOR Arguments Type Intent Optional Attributes Name double precision :: A (NDI,NDI) double precision :: AA (NDI,NDI,NDI,NDI) double precision :: PE (NDI,NDI,NDI,NDI) integer :: NDI Contents None","tags":"","loc":"proc/projeul.html"},{"title":"SIGVOL – Fortran Program","text":"subroutine SIGVOL(SVOL, PV, UNIT2, NDI) VOLUMETRIC CAUCHY STRESS Arguments Type Intent Optional Attributes Name double precision :: SVOL (NDI,NDI) double precision :: PV double precision :: UNIT2 (NDI,NDI) integer :: NDI Contents None","tags":"","loc":"proc/sigvol.html"},{"title":"ISOMAT – Fortran Program","text":"subroutine ISOMAT(SSEISO, DISO, C10, C01, CBARI1, CBARI2) ISOTROPIC MATRIX : ISOCHORIC SEF AND DERIVATIVES Arguments Type Intent Optional Attributes Name double precision :: SSEISO double precision :: DISO (5) double precision :: C10 double precision :: C01 double precision :: CBARI1 double precision :: CBARI2 Contents None","tags":"","loc":"proc/isomat.html"},{"title":"SDVREAD – Fortran Program","text":"subroutine SDVREAD(STATEV, VV) VISCOUS DISSIPATION: READ STATE VARS Arguments Type Intent Optional Attributes Name double precision :: STATEV (NSDV) integer :: VV Contents None","tags":"","loc":"proc/sdvread.html"},{"title":"ANISOMAT – Fortran Program","text":"subroutine ANISOMAT(SSEANISO, DANISO, DISO, K1, K2, KDISP, I4, I1) ANISOTROPIC PART : ISOCHORIC SEF AND DERIVATIVES Arguments Type Intent Optional Attributes Name double precision :: SSEANISO double precision :: DANISO (4) double precision :: DISO (5) double precision :: K1 double precision :: K2 double precision :: KDISP double precision :: I4 double precision :: I1 Contents None","tags":"","loc":"proc/anisomat.html"},{"title":"PK2VOL – Fortran Program","text":"subroutine PK2VOL(PKVOL, PV, C, NDI) VOLUMETRIC PK2 STRESS Arguments Type Intent Optional Attributes Name double precision :: PKVOL (NDI,NDI) double precision :: PV double precision :: C (NDI,NDI) integer :: NDI Contents None","tags":"","loc":"proc/pk2vol.html"},{"title":"PULL4 – Fortran Program","text":"subroutine PULL4(MAT, SPATIAL, FINV, DET, NDI) PULL-BACK TIMES DET OF 4TH ORDER TENSOR Arguments Type Intent Optional Attributes Name double precision :: MAT (NDI,NDI,NDI,NDI) double precision :: SPATIAL (NDI,NDI,NDI,NDI) double precision :: FINV (NDI,NDI) double precision :: DET integer :: NDI Contents None","tags":"","loc":"proc/pull4.html"},{"title":"DEFFIL – Fortran Program","text":"subroutine DEFFIL(LAMBDA, M, M0, F, NDI) SINGLE FILAMENT: STRETCH AND DEFORMED DIRECTION Arguments Type Intent Optional Attributes Name double precision :: LAMBDA double precision :: M (NDI) double precision :: M0 (NDI) double precision :: F (NDI,NDI) integer :: NDI Contents None","tags":"","loc":"proc/deffil.html"},{"title":"SETJR – Fortran Program","text":"subroutine SETJR(CJR, SIGMA, UNIT2, NDI) JAUMAN RATE CONTRIBUTION FOR THE SPATIAL ELASTICITY TENSOR Arguments Type Intent Optional Attributes Name double precision :: CJR (NDI,NDI,NDI,NDI) double precision :: SIGMA (NDI,NDI) double precision :: UNIT2 (NDI,NDI) integer :: NDI Contents None","tags":"","loc":"proc/setjr.html"},{"title":"UMAT – Fortran Program","text":"subroutine UMAT(STRESS, STATEV, DDSDDE, SSE, SPD, SCD, RPL, DDSDDT, DRPLDE, DRPLDT, STRAN, DSTRAN, TIME, DTIME, TEMP, DTEMP, PREDEF, DPRED, CMNAME, NDI, NSHR, NTENS, NSTATEV, PROPS, NPROPS, COORDS, DROT, PNEWDT, CELENT, DFGRD0, DFGRD1, NOEL, NPT, LAYER, KSPT, KSTEP, KINC) Record of revisions:                                              |\n        Date        Programmer        Description of change        |\n        ====        ==========        =====================        |\n     15/11/2017    Joao Ferreira      cont mech general eqs        |\n     01/11/2018    Joao Ferreira      comments added               | Description: UMAT: IMPLEMENTATION OF THE CONSTITUTIVE EQUATIONS BASED UPON A STRAIN-ENERGY FUNCTION (SEF). THIS CODE, AS IS, EXPECTS A SEF BASED ON THE INVARIANTS OF THE CAUCHY-GREEN TENSORS. A VISCOELASTIC COMPONENT IS ALSO INCLUDED IF NEEDED. YOU CAN CHOOSE TO COMPUTE AT THE MATERIAL FRAME AND THEN PUSHFORWARD OR  COPUTE AND THE SPATIAL FRAME DIRECTLY. IF YOU WANT TO ADAPT THE CODE ACCORDING TO YOUR SEF: ISOMAT - DERIVATIVES OF THE SEF IN ORDER TO THE INVARIANTS ADD OTHER CONTRIBUTIONS: STRESS AND TANGENT MATRIX -------------------------------------------------------------------- UEXTERNALDB: READ FILAMENTS ORIENTATION AND PREFERED DIRECTION -------------------------------------------------------------------- Arguments Type Intent Optional Attributes Name double precision :: STRESS (NTENS) double precision :: STATEV (NSTATEV) double precision :: DDSDDE (NTENS,NTENS) double precision :: SSE double precision :: SPD double precision :: SCD double precision :: RPL double precision :: DDSDDT (NTENS) double precision :: DRPLDE (NTENS) double precision :: DRPLDT double precision :: STRAN (NTENS) double precision :: DSTRAN (NTENS) double precision :: TIME (2) double precision :: DTIME double precision :: TEMP double precision :: DTEMP double precision :: PREDEF (1) double precision :: DPRED (1) character(len=8) :: CMNAME integer :: NDI integer :: NSHR integer :: NTENS integer :: NSTATEV double precision :: PROPS (NPROPS) integer :: NPROPS double precision :: COORDS (3) double precision :: DROT (3,3) double precision :: PNEWDT double precision :: CELENT double precision :: DFGRD0 (3,3) double precision :: DFGRD1 (3,3) integer :: NOEL integer :: NPT integer :: LAYER integer :: KSPT integer :: KSTEP integer :: KINC Contents Common Blocks KFIB Common Blocks common /KFIB/ Type Attributes Name Initial real :: FIBORI","tags":"","loc":"proc/umat.html"},{"title":"CONTRACTION44 – Fortran Program","text":"subroutine CONTRACTION44(S, LT, RT, NDI) DOUBLE CONTRACTION BETWEEN 4TH ORDER TENSORS INPUT: LT - RIGHT 4TH ORDER TENSOR RT - LEFT  4TH ORDER TENSOR OUTPUT: S - DOUBLE CONTRACTED TENSOR (4TH ORDER) Arguments Type Intent Optional Attributes Name double precision :: S (NDI,NDI,NDI,NDI) double precision :: LT (NDI,NDI,NDI,NDI) double precision :: RT (NDI,NDI,NDI,NDI) integer :: NDI Contents None","tags":"","loc":"proc/contraction44.html"},{"title":"INITIALIZE – Fortran Program","text":"subroutine INITIALIZE(STATEV, VV) Arguments Type Intent Optional Attributes Name double precision :: STATEV (NSDV) integer :: VV Contents None","tags":"","loc":"proc/initialize.html"},{"title":"SETVOL – Fortran Program","text":"subroutine SETVOL(CVOL, PV, PPV, UNIT2, UNIT4S, NDI) VOLUMETRIC SPATIAL ELASTICITY TENSOR Arguments Type Intent Optional Attributes Name double precision :: CVOL (NDI,NDI,NDI,NDI) double precision :: PV double precision :: PPV double precision :: UNIT2 (NDI,NDI) double precision :: UNIT4S (NDI,NDI,NDI,NDI) integer :: NDI Contents None","tags":"","loc":"proc/setvol.html"},{"title":"HVWRITE – Fortran Program","text":"subroutine HVWRITE(STATEV, HV, V1, NDI) VISCOUS DISSIPATION: WRITE STATE VARS Arguments Type Intent Optional Attributes Name double precision :: STATEV (NSDV) double precision :: HV (NDI,NDI) integer :: V1 integer :: NDI Contents None","tags":"","loc":"proc/hvwrite.html"},{"title":"PK2ISOMATFIC – Fortran Program","text":"subroutine PK2ISOMATFIC(FIC, DISO, CBAR, CBARI1, UNIT2, NDI) ISOTROPIC MATRIX: 2PK 'FICTICIOUS' STRESS TENSOR Arguments Type Intent Optional Attributes Name double precision :: FIC (NDI,NDI) double precision :: DISO (5) double precision :: CBAR (NDI,NDI) double precision :: CBARI1 double precision :: UNIT2 (NDI,NDI) integer :: NDI Contents None","tags":"","loc":"proc/pk2isomatfic.html"},{"title":"UEXTERNALDB – Fortran Program","text":"subroutine UEXTERNALDB(LOP, LRESTART, TIME, DTIME, KSTEP, KINC) READ MESH DATA Arguments Type Intent Optional Attributes Name integer :: LOP integer :: LRESTART real :: TIME real(kind=8) :: DTIME integer :: KSTEP integer :: KINC Contents Common Blocks KFIB Common Blocks common /KFIB/ Type Attributes Name Initial real :: FIBORI","tags":"","loc":"proc/uexternaldb.html"},{"title":"GETOUTDIR – Fortran Program","text":"subroutine GETOUTDIR(OUTDIR, LENOUTDIR) GET CURRENT WORKING DIRECTORY Arguments Type Intent Optional Attributes Name character(len=256) :: OUTDIR integer :: LENOUTDIR Contents None","tags":"","loc":"proc/getoutdir.html"},{"title":"SIGISOMATFIC – Fortran Program","text":"subroutine SIGISOMATFIC(SFIC, PKFIC, F, DET, NDI) ISOTROPIC MATRIX:  ISOCHORIC CAUCHY STRESS Arguments Type Intent Optional Attributes Name double precision :: SFIC (NDI,NDI) double precision :: PKFIC (NDI,NDI) double precision :: F (NDI,NDI) double precision :: DET integer :: NDI Contents None","tags":"","loc":"proc/sigisomatfic.html"},{"title":"PK2ANISOMATFIC – Fortran Program","text":"subroutine PK2ANISOMATFIC(AFIC, DANISO, CBAR, INV4, ST0, NDI) ANISOTROPIC MATRIX: 2PK 'FICTICIOUS' STRESS TENSOR Arguments Type Intent Optional Attributes Name double precision :: AFIC (NDI,NDI) double precision :: DANISO (3) double precision :: CBAR (3,3) double precision :: INV4 double precision :: ST0 (3,3) integer :: NDI Contents None","tags":"","loc":"proc/pk2anisomatfic.html"},{"title":"STRETCH – Fortran Program","text":"subroutine STRETCH(C, B, U, V, NDI) STRETCH TENSORS Arguments Type Intent Optional Attributes Name double precision :: C (NDI,NDI) double precision :: B (NDI,NDI) double precision :: U (NDI,NDI) double precision :: V (NDI,NDI) integer :: NDI Contents None","tags":"","loc":"proc/stretch.html"},{"title":"MATINV3D – Fortran Program","text":"subroutine MATINV3D(A, A_INV, NDI) INVERSE OF A 3X3 MATRIX Arguments Type Intent Optional Attributes Name double precision :: A (NDI,NDI) double precision :: A_INV (NDI,NDI) integer :: NDI Contents None","tags":"","loc":"proc/matinv3d.html"},{"title":"SPECTRAL – Fortran Program","text":"subroutine SPECTRAL(A, D, V) EIGENVALUES AND EIGENVECTOR OF A 3X3 MATRIX Arguments Type Intent Optional Attributes Name double precision :: A (3,3) double precision :: D (3) double precision :: V (3,3) Contents None","tags":"","loc":"proc/spectral.html"},{"title":"JACOBI – Fortran Program","text":"subroutine JACOBI(A, N, NP, D, V, NROT) Arguments Type Intent Optional Attributes Name double precision :: A (NP,NP) integer :: N integer :: NP double precision :: D (NP) double precision :: V (NP,NP) integer :: NROT Contents None","tags":"","loc":"proc/jacobi.html"},{"title":"EIGSRT – Fortran Program","text":"subroutine EIGSRT(D, V, N, NP) Arguments Type Intent Optional Attributes Name double precision :: D (NP) double precision :: V (NP,NP) integer :: N integer :: NP Contents None","tags":"","loc":"proc/eigsrt.html"},{"title":"TENSORPROD2 – Fortran Program","text":"subroutine TENSORPROD2(A, B, C, NDI) Arguments Type Intent Optional Attributes Name double precision :: A (NDI,NDI) double precision :: B (NDI,NDI) double precision :: C (NDI,NDI,NDI,NDI) integer :: NDI Contents None","tags":"","loc":"proc/tensorprod2.html"},{"title":"CSFILFIC – Fortran Program","text":"subroutine CSFILFIC(CFIC, RHO, LAMBDA, DW, DDW, M, RW, NDI) AFFINE NETWORK: 'FICTICIOUS' ELASTICITY TENSOR Arguments Type Intent Optional Attributes Name double precision :: CFIC (NDI,NDI,NDI,NDI) double precision :: RHO double precision :: LAMBDA double precision :: DW double precision :: DDW double precision :: M (NDI) double precision :: RW integer :: NDI Contents None","tags":"","loc":"proc/csfilfic.html"},{"title":"CONTRACTION24 – Fortran Program","text":"subroutine CONTRACTION24(S, LT, RT, NDI) DOUBLE CONTRACTION BETWEEN 4TH ORDER AND 2ND ORDER  TENSOR INPUT: LT - RIGHT 2ND ORDER TENSOR RT - LEFT  4TH ODER TENSOR OUTPUT: S - DOUBLE CONTRACTED TENSOR (2ND ORDER) Arguments Type Intent Optional Attributes Name double precision :: S (NDI,NDI) double precision :: LT (NDI,NDI) double precision :: RT (NDI,NDI,NDI,NDI) integer :: NDI Contents None","tags":"","loc":"proc/contraction24.html"},{"title":"INVARIANTS – Fortran Program","text":"subroutine INVARIANTS(A, INV1, INV2, NDI) 1ST AND 2ND INVARIANTS OF A TENSOR Arguments Type Intent Optional Attributes Name double precision :: A (NDI,NDI) double precision :: INV1 double precision :: INV2 integer :: NDI Contents None","tags":"","loc":"proc/invariants.html"},{"title":"SIGISO – Fortran Program","text":"subroutine SIGISO(SISO, SFIC, PE, NDI) ISOCHORIC CAUCHY STRESS Arguments Type Intent Optional Attributes Name double precision :: SISO (NDI,NDI) double precision :: SFIC (NDI,NDI) double precision :: PE (NDI,NDI,NDI,NDI) integer :: NDI Contents None","tags":"","loc":"proc/sigiso.html"},{"title":"VOL – Fortran Program","text":"subroutine VOL(SSEV, PV, PPV, K, DET) VOLUMETRIC CONTRIBUTION :STRAIN ENERGY FUNCTION AND DERIVATIVES Arguments Type Intent Optional Attributes Name double precision :: SSEV double precision :: PV double precision :: PPV double precision :: K double precision :: DET Contents None","tags":"","loc":"proc/vol.html"},{"title":"PUSH4 – Fortran Program","text":"subroutine PUSH4(SPATIAL, MAT, F, DET, NDI) PIOLA TRANSFORMATION INPUT: MAT - MATERIAL ELASTICITY TENSOR F - DEFORMATION GRADIENT DET - DEFORMATION DETERMINANT OUTPUT: SPATIAL - SPATIAL ELASTICITY TENSOR Arguments Type Intent Optional Attributes Name double precision :: SPATIAL (NDI,NDI,NDI,NDI) double precision :: MAT (NDI,NDI,NDI,NDI) double precision :: F (NDI,NDI) double precision :: DET integer :: NDI Contents None","tags":"","loc":"proc/push4.html"},{"title":"HFILFIC – Fortran Program","text":"subroutine HFILFIC(H, HH, PP, LAMBDA, M, RW, NDI) NON-AFFINE NETWORK: STRUCTURE TENSORS Arguments Type Intent Optional Attributes Name double precision :: H (NDI,NDI) double precision :: HH (NDI,NDI,NDI,NDI) double precision :: PP double precision :: LAMBDA double precision :: M (NDI) double precision :: RW integer :: NDI Contents None","tags":"","loc":"proc/hfilfic.html"},{"title":"SIGFILFIC – Fortran Program","text":"subroutine SIGFILFIC(SFIC, RHO, LAMBDA, DW, M, RW, NDI) SINGLE FILAMENT:  'FICTICIUOUS' CAUCHY STRESS Arguments Type Intent Optional Attributes Name double precision :: SFIC (NDI,NDI) double precision :: RHO double precision :: LAMBDA double precision :: DW double precision :: M (NDI) double precision :: RW integer :: NDI Contents None","tags":"","loc":"proc/sigfilfic.html"},{"title":"PK2ISO – Fortran Program","text":"subroutine PK2ISO(PKISO, PKFIC, PL, DET, NDI) ISOCHORIC PK2 STRESS TENSOR Arguments Type Intent Optional Attributes Name double precision :: PKISO (NDI,NDI) double precision :: PKFIC (NDI,NDI) double precision :: PL (NDI,NDI,NDI,NDI) double precision :: DET integer :: NDI Contents None","tags":"","loc":"proc/pk2iso.html"},{"title":"ONEM – Fortran Program","text":"subroutine ONEM(A, AA, AAS, NDI) THIS SUBROUTINE GIVES: 2ND ORDER IDENTITY TENSORS - A 4TH ORDER IDENTITY TENSOR - AA 4TH ORDER SYMMETRIC IDENTITY TENSOR - AAS Arguments Type Intent Optional Attributes Name double precision :: A (NDI,NDI) double precision :: AA (NDI,NDI,NDI,NDI) double precision :: AAS (NDI,NDI,NDI,NDI) integer :: NDI Contents None","tags":"","loc":"proc/onem.html"},{"title":"METISO – Fortran Program","text":"subroutine METISO(CMISO, CMFIC, PL, PKISO, PKFIC, C, UNIT2, DET, NDI) ISOCHORIC MATERIAL ELASTICITY TENSOR Arguments Type Intent Optional Attributes Name double precision :: CMISO (NDI,NDI,NDI,NDI) double precision :: CMFIC (NDI,NDI,NDI,NDI) double precision :: PL (NDI,NDI,NDI,NDI) double precision :: PKISO (NDI,NDI) double precision :: PKFIC (NDI,NDI) double precision :: C (NDI,NDI) double precision :: UNIT2 (NDI,NDI) double precision :: DET integer :: NDI Contents None","tags":"","loc":"proc/metiso.html"},{"title":"SETISO – Fortran Program","text":"subroutine SETISO(CISO, CFIC, PE, SISO, SFIC, UNIT2, NDI) ISOCHORIC SPATIAL ELASTICITY TENSOR Arguments Type Intent Optional Attributes Name double precision :: CISO (NDI,NDI,NDI,NDI) double precision :: CFIC (NDI,NDI,NDI,NDI) double precision :: PE (NDI,NDI,NDI,NDI) double precision :: SISO (NDI,NDI) double precision :: SFIC (NDI,NDI) double precision :: UNIT2 (NDI,NDI) integer :: NDI Contents None","tags":"","loc":"proc/setiso.html"},{"title":"PUSH2 – Fortran Program","text":"subroutine PUSH2(SIG, PK, F, DET, NDI) PIOLA TRANSFORMATION INPUT: PK - 2ND PIOLA KIRCHOOF STRESS TENSOR F - DEFORMATION GRADIENT DET - DEFORMATION DETERMINANT OUTPUT: SIG - CAUCHY STRESS TENSOR Arguments Type Intent Optional Attributes Name double precision :: SIG (NDI,NDI) double precision :: PK (NDI,NDI) double precision :: F (NDI,NDI) double precision :: DET integer :: NDI Contents None","tags":"","loc":"proc/push2.html"},{"title":"DEFORMATION – Fortran Program","text":"subroutine DEFORMATION(F, C, B, NDI) RIGHT AND LEFT CAUCHY-GREEN DEFORMATION TENSORS Arguments Type Intent Optional Attributes Name double precision :: F (NDI,NDI) double precision :: C (NDI,NDI) double precision :: B (NDI,NDI) integer :: NDI Contents None","tags":"","loc":"proc/deformation.html"},{"title":"FSLIP – Fortran Program","text":"subroutine FSLIP(F, FBAR, DET, NDI) DISTORTION GRADIENT Arguments Type Intent Optional Attributes Name double precision :: F (NDI,NDI) double precision :: FBAR (NDI,NDI) double precision :: DET integer :: NDI Contents None","tags":"","loc":"proc/fslip.html"},{"title":"CMATANISOMATFIC – Fortran Program","text":"subroutine CMATANISOMATFIC(CMANISOMATFIC, M0, DANISO, UNIT2, DET, NDI) ANISOTROPIC MATRIX: MATERIAL 'FICTICIOUS' ELASTICITY TENSOR Arguments Type Intent Optional Attributes Name double precision :: CMANISOMATFIC (NDI,NDI,NDI,NDI) double precision :: M0 (NDI,NDI) double precision :: DANISO (3) double precision :: UNIT2 (NDI,NDI) double precision :: DET integer :: NDI Contents None","tags":"","loc":"proc/cmatanisomatfic.html"},{"title":"SDVWRITE – Fortran Program","text":"subroutine SDVWRITE(DET, STATEV, VV) VISCOUS DISSIPATION: WRITE STATE VARS Arguments Type Intent Optional Attributes Name double precision :: DET double precision :: STATEV (NSDV) integer :: VV Contents None","tags":"","loc":"proc/sdvwrite.html"},{"title":"VISCO – Fortran Program","text":"subroutine VISCO(PK, CMAT, VV, PKVOL, PKISO, CMATVOL, CMATISO, DTIME, VSCPROPS, STATEV, NDI) VISCOUS DISSIPATION: MAXWELL SPRINGS AND DASHPOTS SCHEME Arguments Type Intent Optional Attributes Name double precision :: PK (NDI,NDI) double precision :: CMAT (NDI,NDI,NDI,NDI) integer :: VV double precision :: PKVOL (NDI,NDI) double precision :: PKISO (NDI,NDI) double precision :: CMATVOL (NDI,NDI,NDI,NDI) double precision :: CMATISO (NDI,NDI,NDI,NDI) double precision :: DTIME double precision :: VSCPROPS (6) double precision :: STATEV (NSDV) integer :: NDI Contents None","tags":"","loc":"proc/visco.html"},{"title":"RESETDFGRD – Fortran Program","text":"subroutine RESETDFGRD(DFGRD, NDI) Arguments Type Intent Optional Attributes Name double precision :: DFGRD (NDI,NDI) integer :: NDI Contents None","tags":"","loc":"proc/resetdfgrd.html"},{"title":"FIBDIR – Fortran Program","text":"subroutine FIBDIR(FIB, ST0, ST, NE, NOEL, NDI, VORIF, VD, DISTGR, DFGRD1) Arguments Type Intent Optional Attributes Name double precision :: FIB (NE,4) double precision :: ST0 (3,3) double precision :: ST (3,3) integer :: NE integer :: NOEL integer :: NDI double precision :: VORIF (3) double precision :: VD (3) double precision :: DISTGR (3,3) double precision :: DFGRD1 (3,3) Contents None","tags":"","loc":"proc/fibdir.html"},{"title":"INDEXX – Fortran Program","text":"subroutine INDEXX(STRESS, DDSDDE, SIG, TNG, NTENS, NDI) INDEXATION : FULL SIMMETRY IN STRESSES AND ELASTICITY TENSORS Arguments Type Intent Optional Attributes Name double precision :: STRESS (NTENS) double precision :: DDSDDE (NTENS,NTENS) double precision :: SIG (NDI,NDI) double precision :: TNG (NDI,NDI,NDI,NDI) integer :: NTENS integer :: NDI Contents None","tags":"","loc":"proc/indexx.html"},{"title":"ROTATION – Fortran Program","text":"subroutine ROTATION(F, R, U, NDI) COMPUTES ROTATION TENSOR Arguments Type Intent Optional Attributes Name double precision :: F (NDI,NDI) double precision :: R (NDI,NDI) double precision :: U (NDI,NDI) integer :: NDI Contents None","tags":"","loc":"proc/rotation.html"},{"title":"CMATISOMATFIC – Fortran Program","text":"subroutine CMATISOMATFIC(CMISOMATFIC, CBAR, CBARI1, CBARI2, DISO, UNIT2, UNIT4, DET, NDI) ISOTROPIC MATRIX: MATERIAL 'FICTICIOUS' ELASTICITY TENSOR Arguments Type Intent Optional Attributes Name double precision :: CMISOMATFIC (NDI,NDI,NDI,NDI) double precision :: CBAR (NDI,NDI) double precision :: CBARI1 double precision :: CBARI2 double precision :: DISO (5) double precision :: UNIT2 (NDI,NDI) double precision :: UNIT4 (NDI,NDI,NDI,NDI) double precision :: DET integer :: NDI Contents None","tags":"","loc":"proc/cmatisomatfic.html"},{"title":"PROJLAG – Fortran Program","text":"subroutine PROJLAG(C, AA, PL, NDI) LAGRANGIAN PROJECTION TENSOR Arguments Type Intent Optional Attributes Name double precision :: C (NDI,NDI) double precision :: AA (NDI,NDI,NDI,NDI) double precision :: PL (NDI,NDI,NDI,NDI) integer :: NDI Contents None","tags":"","loc":"proc/projlag.html"},{"title":"RELAX – Fortran Program","text":"subroutine RELAX(QV, HV, AUX1, HV0, PKISO, DTIME, TAU, TETA, NDI) VISCOUS DISSIPATION: STRESS RELAXATION TENSORS Arguments Type Intent Optional Attributes Name double precision :: QV (NDI,NDI) double precision :: HV (NDI,NDI) double precision :: AUX1 double precision :: HV0 (NDI,NDI) double precision :: PKISO (NDI,NDI) double precision :: DTIME double precision :: TAU double precision :: TETA integer :: NDI Contents None","tags":"","loc":"proc/relax.html"},{"title":"CSISOMATFIC – Fortran Program","text":"subroutine CSISOMATFIC(CISOMATFIC, CMISOMATFIC, DISTGR, DET, NDI) ISOTROPIC MATRIX: SPATIAL 'FICTICIOUS' ELASTICITY TENSOR Arguments Type Intent Optional Attributes Name double precision :: CISOMATFIC (NDI,NDI,NDI,NDI) double precision :: CMISOMATFIC (NDI,NDI) double precision :: DISTGR (NDI,NDI) double precision :: DET integer :: NDI Contents None","tags":"","loc":"proc/csisomatfic.html"},{"title":"HVREAD – Fortran Program","text":"subroutine HVREAD(HV, STATEV, V1, NDI) VISCOUS DISSIPATION: READ STATE VARS Arguments Type Intent Optional Attributes Name double precision :: HV (NDI,NDI) double precision :: STATEV (NSDV) integer :: V1 integer :: NDI Contents None","tags":"","loc":"proc/hvread.html"},{"title":"TEST_GENERAL_UMAT – Fortran Program","text":"Uses iso_fortran_env TENSILE MONOTONIC LOAD TEST Contents Variables CMNAME filename un Variables Type Attributes Name Initial character(len=8) :: CMNAME character(len=8) :: filename integer :: un","tags":"","loc":"program/test_general_umat.html"}]}